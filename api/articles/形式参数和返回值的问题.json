{"title":"形式参数和返回值的问题","uid":"f0dff90444263315eec834dbee6f43a2","slug":"形式参数和返回值的问题","date":"2018-12-11T01:15:54.000Z","updated":"2019-04-05T01:05:03.000Z","comments":true,"path":"api/articles/形式参数和返回值的问题.json","keywords":null,"cover":null,"content":"<h2 id=\"形式参数\"><a href=\"#形式参数\" class=\"headerlink\" title=\"形式参数\"></a>形式参数</h2><p>基本类型<br>引用类型:</p>\n<ul>\n<li><p>类名: (需要该类的对象)</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class Student&#123;\n\tpublic void study()&#123;\n\t\tSystem.out.println(&quot;学习&quot;);\n\t&#125;\n&#125;\n\nclass StudentDemo&#123;\n\tpublic void method(Student s)&#123;&#x2F;&#x2F; ss; ss &#x3D; new Student(); Student s &#x3D; new Student();\n\t\ts.study();\n\t&#125;\n&#125;\n\nclass StudentTest&#123;\n\tpublic static void main(String[] args)&#123;\n\t\tStudent s &#x3D; new Student();\n\t\ts.study();\n\t\tSystem.out.println(&quot;---------&quot;);\n\t\tStudentDemo sd &#x3D; new StudentDemo();\n\t\tStudent ss &#x3D; new Student();\n\t\tsd.method(ss);&#x2F;&#x2F; &#x3D; sd.method(new Student());\n\t\tSystem.out.println(&quot;---------&quot;);\n\t\tnew StudentDemo().method(new Student());&#x2F;&#x2F;匿名对象\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>抽象类:(抽象类没有对应的具体类时无法使用)(需要该抽象类的子类对象)</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">abstract class Person&#123;\n\tpublic abstract void study();\n&#125;\n\nclass PersonDemo&#123;\n\tpublic void method(Person p)&#123;&#x2F;&#x2F; p; p &#x3D; new Student(); Person p &#x3D; new Student(); &#x2F;&#x2F;多态\n\t\tp.study();\n\t&#125;\n&#125;\n\nclass Student extends Person&#123;\n\tpublic void study()&#123;\n\t\tSystem.out.println(&quot;学习&quot;);\n\t&#125;\n&#125;\n\nclass PersonTest&#123;\n\tpublic static void main(String[] args)&#123;\n\t\t&#x2F;&#x2F;抽象类没有对应的具体类时无法使用\n\t\tPersonDemo pd &#x3D; new PersonDemo();\n\t\tPerson p &#x3D; new Student();\n\t\tpd.method(p);\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>接口:(需要该接口的实现类对象)</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">interface Hobby&#123;\n\tpublic abstract void hobby();\n&#125;\n\nclass hobbyDemo &#123;\n\tpublic void method(Hobby h)&#123;&#x2F;&#x2F; h ; h &#x3D; new Teacher(); Hobby h &#x3D; new Teacher();&#x2F;&#x2F;多态\n\t\th.hobby();\n\t&#125;\n&#125;\n\nclass Teacher implements Hobby&#123;\n\tpublic void hobby()&#123;\n\t\tSystem.out.println(&quot;打麻将&quot;);\n\t&#125;\n&#125;\n\nclass TeacherTest&#123;\n\tpublic static void main(String[] args)&#123;\n\t\t&#x2F;&#x2F;需要具体类实现接口\n\t\thobbyDemo hd &#x3D; new hobbyDemo();\n\t\tHobby h &#x3D; new Teacher();\n\t\thd.method(h);\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"返回值类型\"><a href=\"#返回值类型\" class=\"headerlink\" title=\"返回值类型\"></a>返回值类型</h2><p>基本类型<br>引用类型:</p>\n<ul>\n<li>类:(返回的是该类的对象)<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class Student&#123;\n\tpublic void study()&#123;\n\t\tSystem.out.println(&quot;学习&quot;);\n\t&#125;\n&#125;\n\nclass StudentDemo&#123;\n\tpublic Student getStudent()&#123;\n\t\t&#x2F;&#x2F;Student s &#x3D; new Student();\n\t\t&#x2F;&#x2F;Student ss &#x3D; s;\n\t\t&#x2F;&#x2F;Student s &#x3D; new Student();\n\t\t&#x2F;&#x2F;return s;\n\t\treturn new Student();\n\t&#125;\n&#125;\n\nclass StudentTest&#123;\n\tpublic static void main(String[] args)&#123;\n\t\t&#x2F;&#x2F;不创建student对象 使用studentDemo创建对象\n\t\tStudentDemo sd &#x3D; new StudentDemo();\n\t\tStudent s &#x3D; sd.getStudent();\n\t\ts.study();\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>抽象类:(返回的是该抽象类的子类对象)<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">abstract class Person&#123;\n\tpublic abstract void study();\n&#125;\n\nclass PersonDemo&#123;\n\tpublic Person getPerson()&#123;\n\t\tPerson p &#x3D; new Student();\n\t\treturn p;\n\t&#125;\n&#125;\n\nclass Student extends Person&#123;\n\tpublic void study()&#123;\n\t\tSystem.out.println(&quot;学习&quot;);\n\t&#125;\n&#125;\n\nclass PersonTest&#123;\n\tpublic static void main(String[] args)&#123;\n\t\tPersonDemo pd &#x3D; new PersonDemo();\n\t\tPerson p &#x3D; pd.getPerson();&#x2F;&#x2F;new Student(); Person p &#x3D; new Student();&#x2F;&#x2F;多态\n\t\tp.study();\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>接口:(返回该接口的实现类的对象)<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">interface Hobby&#123;\n\tpublic abstract void hobby();\n&#125;\n\nclass hobbyDemo &#123;\n\tpublic Hobby getHobby()&#123;\n\t\treturn new Teacher();\n\t&#125;\n&#125;\n\nclass Teacher implements Hobby&#123;\n\tpublic void hobby()&#123;\n\t\tSystem.out.println(&quot;打麻将&quot;);\n\t&#125;\n&#125;\n\nclass TeacherTest&#123;\n\tpublic static void main(String[] args)&#123;\n\t\thobbyDemo hd &#x3D; new hobbyDemo();\n\t\tHobby h &#x3D; hd.getHobby();\n\t\th.hobby();\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"链式编程\"><a href=\"#链式编程\" class=\"headerlink\" title=\"链式编程\"></a>链式编程</h2><p>特点：每次调用完毕方法后，返回的是一个对象。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class Student&#123;\n\tpublic void study()&#123;\n\t\tSystem.out.println(&quot;学习&quot;);\n\t&#125;\n&#125;\n\nclass StudentDemo&#123;\n\tpublic void method(Student s)&#123;&#x2F;&#x2F; ss; ss &#x3D; new Student(); Student s &#x3D; new Student();\n\t\ts.study();\n\t&#125;\n&#125;\n\nclass StudentTest&#123;\n\tpublic static void main(String[] args)&#123;\n\t\tStudentDemo sd &#x3D; new StudentDemo();\n\t\tsd.getStudent().study();&#x2F;&#x2F;链式编程\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"形式参数基本类型引用类型: 类名: (需要该类的对象) class Student&#123; public void study()&#123; System.out.println(&quot;学习&quot;); &#125; &#125; class StudentDem...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">形式参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">返回值类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E5%BC%8F%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">链式编程</span></a></li></ol>","author":{"name":"Allen Yang","slug":"blog-author","avatar":"/public/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"package概述及作用","uid":"4dfc24012675b059867bcf499de79b27","slug":"package概述及作用","date":"2018-12-11T08:22:23.000Z","updated":"2019-04-05T01:47:05.000Z","comments":true,"path":"api/articles/package概述及作用.json","keywords":null,"cover":null,"text":"包的概述 其实就是文件夹 作用:a:把相同的类名放到不同的包中b:对类进行分类管理 eg:学生:增删改查老师:增删改查 方1:按照功能分 cn.school.add AddStudent AddTeacher cn.school.delete DeleteStudent Dele...","link":"","photos":[],"count_time":{"symbolsCount":827,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/public/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"运动员与教练练习题","uid":"6831cd9b2cda379b7d3cdbe218da0894","slug":"运动员与教练练习题","date":"2018-12-10T12:29:11.000Z","updated":"2019-04-05T01:06:17.000Z","comments":true,"path":"api/articles/运动员与教练练习题.json","keywords":null,"cover":[],"text":"例题概况 乒乓球运动员和篮球运动员 乒乓球教练和篮球教练 为了出国交流,跟乒乓球相关的人员都需要学习英语 分析 这个案例哪些需要抽象类,哪些接口,哪些具体类 例题分析抽象类：人、运动员、教练具体类：乒乓球运动员、篮球运动员、乒乓球教练、篮球教练接口：学习英语—乒乓球运动员、乒乓球...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"例题","slug":"例题","count":2,"path":"api/tags/例题.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/public/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}