{"title":"代码块","uid":"efa8c010c59ff382983a4c1b80223f3a","slug":"代码块","date":"2018-12-07T02:42:11.000Z","updated":"2019-04-05T01:04:38.000Z","comments":true,"path":"api/articles/代码块.json","keywords":null,"cover":null,"content":"<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><p>在Java中，使用{}括起来的代码被称为代码块，根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块。</p>\n<h3 id=\"局部代码块\"><a href=\"#局部代码块\" class=\"headerlink\" title=\"局部代码块\"></a>局部代码块</h3><p>在方法中出现；限定变量生命周期，及早释放，提高内存利用率。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//局部代码块</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//找不到符号，不能在代码块外使用。</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//代码块依次执行</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"构造代码块\"><a href=\"#构造代码块\" class=\"headerlink\" title=\"构造代码块\"></a>构造代码块</h3><p>在类中方法外出现；多个构造方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行。<br>作用：可以把多个构造方法中的共同代码放到一起。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class Code&#123;\n\t&#123;\n\t\tint x &#x3D; 100;\n\t\tSystem.out.println(x);\n\t&#125;\n\tpublic Code()&#123;\n\t\tSystem.out.println(&quot;code&quot;);\n\t&#125;\n\tpublic Code(int a)&#123;\n\t\tSystem.out.println(&quot;code&quot;);\n\t&#125;\n\t&#123;\n\t\tint y &#x3D; 200;\n\t\tSystem.out.println(y);\n\t&#125;\n\t&#123;\n\t\tint z &#x3D; 300;\n\t\tSystem.out.println(z);\n\t&#125;\n&#125;\npublic static void main(String[] args)&#123;\n\tCode c &#x3D; new Code();&#x2F;&#x2F;代码块执行,且构造方法最后执行。\n\tCode c1 &#x3D; new Code();&#x2F;&#x2F;代码块执行,且构造方法最后执行。\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p>在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class Code&#123;\n\t&#x2F;&#x2F;静态代码块\n\tstatic &#123;\n\t\tint x &#x3D; 1000;\n\t\tSystem.out.println(x);\n\t&#125;\n\t&#x2F;&#x2F;静态代码块\n\tstatic &#123;\n\t\tint b &#x3D; 2000;\n\t\tSystem.out.println(b);\n\t&#125;\n\t&#x2F;&#x2F;构造方法\n\tpublic Code()&#123;\n\t\tSystem.out.println(&quot;code&quot;);\n\t&#125;\n\t&#x2F;&#x2F;构造方法\n\tpublic Code(int a)&#123;\n\t\tSystem.out.println(&quot;code&quot;);\n\t&#125;\n\t&#x2F;&#x2F;构造代码块\n\t&#123;\n\t\tint y &#x3D; 200;\n\t\tSystem.out.println(y);\n\t&#125;\n\t&#x2F;&#x2F;构造代码块\n\t&#123;\n\t\tint z &#x3D; 300;\n\t\tSystem.out.println(z);\n\t&#125;\n&#125;\npublic static void main(String[] args)&#123;\n\tCode c &#x3D; new Code();&#x2F;&#x2F;先执行静态代码块，后执行构造代码块代码块,构造方法最后执行。\n\tCode c1 &#x3D; new Code();&#x2F;&#x2F;静态代码块只执行一次，所以这次不执行。代码块执行,构造方法最后执行。\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"同步代码块\"><a href=\"#同步代码块\" class=\"headerlink\" title=\"同步代码块\"></a>同步代码块</h3>","text":"代码块在Java中，使用{}括起来的代码被称为代码块，根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块。 局部代码块在方法中出现；限定变量生命周期，及早释放，提高内存利用率。 public static void main(String[] args...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">代码块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">局部代码块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">构造代码块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">静态代码块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">同步代码块</span></a></li></ol></li></ol>","author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"继承","uid":"0528be18df5e638068d2debce4ac533e","slug":"继承","date":"2018-12-08T02:02:19.000Z","updated":"2021-06-28T13:08:29.367Z","comments":true,"path":"api/articles/继承.json","keywords":null,"cover":[],"text":"概述多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。通过extends关键字可以实现类与类的继承 class 子类名 extends父类名&#123;&#125; 单独的这个类成为父类，基类或者超类；这多个类可以...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"帮助文档的制作以及使用","uid":"028ef52bbaecf50bd1bcb213347b2846","slug":"帮助文档的制作以及使用","date":"2018-12-06T15:50:11.000Z","updated":"2019-04-05T01:04:53.000Z","comments":true,"path":"api/articles/帮助文档的制作以及使用.json","keywords":null,"cover":null,"text":"制作工具类的说明书（文档注释）文档注释格式： /** * * * * * * */ 字段 @author (作者)@version (版本)@param (参数)@return (返回值) javadoc格式： javadoc -d 目录 -author -version XXX...","link":"","photos":[],"count_time":{"symbolsCount":698,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}