{"title":"面向对象","uid":"43b177c0ef2e494c11cddc986521f4d9","slug":"面向对象","date":"2018-12-06T15:03:21.000Z","updated":"2021-06-28T15:29:40.784Z","comments":true,"path":"api/articles/面向对象.json","keywords":null,"cover":[],"content":"<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h3 id=\"面向对象思想\"><a href=\"#面向对象思想\" class=\"headerlink\" title=\"面向对象思想\"></a>面向对象思想</h3><p>面向对象是基于面向过程<br>面向过程:强调的是每一个功能的步骤.<br>面向对象:强调的是对象,然后由对象去调用功能(强调结果).</p>\n<h3 id=\"面向对象特点\"><a href=\"#面向对象特点\" class=\"headerlink\" title=\"面向对象特点\"></a>面向对象特点</h3><p>A:是一种更符合我们思想习惯的思想.<br>B:可以将复杂的事情简单化.<br>C:将我们以执行者变成指挥者.<br>eg:自己去打水变成让别人去打水.</p>\n<h3 id=\"举例买电脑\"><a href=\"#举例买电脑\" class=\"headerlink\" title=\"举例买电脑\"></a>举例买电脑</h3><p>面向过程:了解电脑 -&gt; 了解自己的需求 -&gt; 找对应的参数信息 -&gt; 去买电脑 -&gt; 讨价还价 -&gt; 买回电脑<br>面向对象:要买电脑 -&gt; <strong>找人去给我买</strong> -&gt; 买回来了</p>\n<h3 id=\"举例把大象装进冰箱\"><a href=\"#举例把大象装进冰箱\" class=\"headerlink\" title=\"举例把大象装进冰箱\"></a>举例把大象装进冰箱</h3><h4 id=\"面向过程\"><a href=\"#面向过程\" class=\"headerlink\" title=\"面向过程:\"></a>面向过程:</h4><p>动作步骤:1.打开冰箱门 2.装进大象 3.关闭冰箱门</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class Demo&#123;\n\tpublic static void main(String[] args)&#123;\n\t\topen();\n\t\tin();\n\t\tclose();\n&#125;\n\tpublic static void open()&#123;\n\t\tSystem.out.println(&quot;打开冰箱门&quot;);\n&#125;\n\tpublic static void in()&#123;\n\t\tSystem.out.println(&quot;装进大象&quot;);\n&#125;\n\tpublic static void close()&#123;\n\t\tSystem.out.println(&quot;关闭冰箱门&quot;);\n&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"面向对象-1\"><a href=\"#面向对象-1\" class=\"headerlink\" title=\"面向对象:\"></a>面向对象:</h4><p>我们怎么才能更符合面向对象思想呢?<br>A:有哪些类?<br>B:每个类有哪些东西?<br>C:类与类直接的关系是什么?</p>\n<p>把大象装进冰箱的分析?(如何分析有哪些类呢?UML.名词提取法.)<br>A:有哪些类呢? 大象,冰箱,Demo.<br>B:每个类有哪些东西呢? 大象:进去 , 冰箱:开门,关门 , Demo:main方法.<br>C:类与类直接的关系是什么呢? Demo中使用大象和冰箱类的功能.</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class Daxiang&#123;\n\tpublic static void in()&#123;\n\t\tSystem.out.println(&quot;装进大象&quot;);\n&#125;\n&#125;\n\nclass Bingxiang&#123;\n\tpublic static void open()&#123;\n\t\tSystem.out.println(&quot;打开冰箱门&quot;);\n&#125;\n\tpublic static void close()&#123;\n\t\tSystem.out.println(&quot;关闭冰箱门&quot;);\n&#125;\n&#125;\n\nclass Demo&#123;\n\tpublic static void main(String[] args)&#123;\n\t\tDaxiang dx &#x3D; new Daxiang();\n\t\tBingxiang bx &#x3D; new Bingxiang();\n\t\tbx.open();\n\t\tdx.in();\n\t\tbx.close();\n&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"面向对象开发、设计及特征\"><a href=\"#面向对象开发、设计及特征\" class=\"headerlink\" title=\"面向对象开发、设计及特征\"></a>面向对象开发、设计及特征</h3><p>开发:不断的创建对象,使用对象,指挥对象做事情.<br>设计:管理和维护对象之间的关系.<br>特征:<strong>封装</strong>(encapsulation),<strong>继承</strong>(inheritance),<strong>多态</strong>(polymorphism).</p>\n<h3 id=\"类的定义和概述\"><a href=\"#类的定义和概述\" class=\"headerlink\" title=\"类的定义和概述\"></a>类的定义和概述</h3><p>事物:</p>\n<pre><code>属性:事物的信息描述\n行为:事物的功能\n</code></pre>\n<p>类:</p>\n<pre><code>成员变量:事物的属性\n成员方法:事物的行为\n</code></pre>\n<p>类:是一组相关的属性和行为的集合,是一个抽象的概念.<br>对象:是该类事物的具体表现形式.具体存在的个体.<br>定义一个类,其实就是定义该类的成员变量和成员方法.</p>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><pre><code>创建对象格式:类名 对象名 = new 类名();\n</code></pre>\n<p>使用成员变量:</p>\n<pre><code>对象名.变量名;\n</code></pre>\n<p>使用成员方法:</p>\n<pre><code>对象名.方法名(...); \n</code></pre>\n<h3 id=\"成员变量和局部变量的区别\"><a href=\"#成员变量和局部变量的区别\" class=\"headerlink\" title=\"成员变量和局部变量的区别\"></a>成员变量和局部变量的区别</h3><h4 id=\"在类中的位置不同\"><a href=\"#在类中的位置不同\" class=\"headerlink\" title=\"在类中的位置不同\"></a>在类中的位置不同</h4><p>成员变量:在类中方法外.<br>局部变量:在方法定义中或者方法声明上.</p>\n<h4 id=\"在内存中的位置不同\"><a href=\"#在内存中的位置不同\" class=\"headerlink\" title=\"在内存中的位置不同\"></a>在内存中的位置不同</h4><p>成员变量:在堆内存中.<br>局部变量:在栈内存中.</p>\n<h4 id=\"生命周期不同\"><a href=\"#生命周期不同\" class=\"headerlink\" title=\"生命周期不同\"></a>生命周期不同</h4><p>成员变量:随着对象的创建而存在随着对象的消失而消失.<br>局部变量:随着方法的调用而存在,随着方法调用完毕而消失.</p>\n<h4 id=\"初始化值不同\"><a href=\"#初始化值不同\" class=\"headerlink\" title=\"初始化值不同\"></a>初始化值不同</h4><p>成员变量:有默认初始化值.<br>局部变量:没有默认初始化值,必须定义赋值才能使用.</p>\n<p>注:局部变量名称可以和成员变量名称一样,在方法中使用的时候,采用就近原则.</p>\n<h3 id=\"创建对象内存图\"><a href=\"#创建对象内存图\" class=\"headerlink\" title=\"创建对象内存图\"></a>创建对象内存图</h3><p>创建一个对象内存图<br><img src=\"/img/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE.png\"><br>创建两个对象内存图<br><img src=\"/img/%E5%88%9B%E5%BB%BA%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE.png\"><br>创建三个对象内存图<br><img src=\"/img/%E5%88%9B%E5%BB%BA%E4%B8%89%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE.png\"></p>\n<h3 id=\"形式参数\"><a href=\"#形式参数\" class=\"headerlink\" title=\"形式参数\"></a>形式参数</h3><p>基本类型:形式参数的改变不影响实际参数.<br>引用类型:形式参数的改变直接影响实际参数.</p>\n<p>类是一个引用类型<br>如果看到一个方法的形式参数是一个类类型(引用类型),这里需要的是该类的对象对象.</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F;形式参数是基本类型例子\nclass Demo&#123;\n\tpublic int sum(int a,int b)&#123;\n\t\treturn a + b;\n\t&#125;\n&#125;\n&#x2F;&#x2F;形式参数是引用类型\nclass Student&#123;\n\tpublic void show()&#123;\n\t\tSystem.out.println(&quot;我爱学习&quot;);\n\t&#125;\n&#125;\n\nclass StudentDemo&#123;\n\tpublic void method(Student s)&#123;&#x2F;&#x2F;调用的时候,把main方法中的s的地址值传递到了这里 Stduent s &#x3D; new Student();\n\t\ts.show();\n\t&#125;\n&#125;\n\nclass ArgsTest&#123;\n\tpublic static void main(String[] args)&#123;\n\t\t&#x2F;&#x2F;形式参数是基本类型的调用\n\t\tDemo d &#x3D; new Demo();\n\t\tint result &#x3D; d.sum(10,20);\n\t\tSystem.out.println(&quot;result:&quot; + result);\n\n\t\t&#x2F;&#x2F;形式参数是引用类型的调用\n\t\t&#x2F;&#x2F;需求:要调用StudentDemo类中的method()方法\n\t\tStudentDemo sd &#x3D; new StudentDemo();\n\t\t&#x2F;&#x2F;创建学生对象\n\t\tStduent s &#x3D; new Student();\n\t\tsd.method(s);&#x2F;&#x2F;把s的地址给到了这里\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h3><p>匿名对象:就是没有名字的对象.<br>匿名对象的应用场景:</p>\n<pre><code>A:调用方法,仅仅只调用一次的时候.\n注意:多次的时候,不适合.\n好处:匿名对象调用完毕就是垃圾,可以被垃圾回收器回收.\nB:匿名对象可以作为实际参数传递.\n</code></pre>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class Student &#123;\n\tpublic void show()&#123;\n\t\tSystem.out.println(&quot;我爱学习&quot;).\n\t&#125;\n&#125;\n\nclass StudentDemo&#123;\n\tpublic void method(Student s)&#123;\n\t\ts.show();\n\t&#125;\n&#125;\n\nclass NoNameDemo&#123;\n\tpublic static void main(String[] args)&#123;\n\t\t&#x2F;&#x2F;带名字的调用\n\t\tStudent s &#x3D; new Student();\n\t\ts.show();\n\n\t\t&#x2F;&#x2F;匿名对象\n\t\t&#x2F;&#x2F;new Student();\n\t\t&#x2F;&#x2F;匿名对象调用方法\n\t\tnew Student().show();&#x2F;&#x2F;这里其实是创建了一个新的对象\n\n\t\t&#x2F;&#x2F;匿名对象作为实际参数传递\n\t\tStudentDemo sd &#x3D; new StudentDemo();\n\t\t&#x2F;&#x2F;带名字的调用\n\t\tStudent ss &#x3D; new Student();\n\t\tsd.method(ss);&#x2F;&#x2F;这里的s是一个实际参数.\n\t\t&#x2F;&#x2F;匿名对象\n\t\tsd.method(new Student());\n\t\t&#x2F;&#x2F;全部匿名对象\n\t\tnew StudentDemo().method(new Student());\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>封装:</p>\n<pre><code>隐藏对象的属性和实现细节,仅对外提供公共访问方式.\n</code></pre>\n<p>好处:</p>\n<pre><code>隐藏实现细节,提供公共的访问方式.\n提高了代码的复用性\n提高了安全性\n</code></pre>\n<p>封装原则:</p>\n<pre><code>将不需要对外提供的内容都隐藏起来.\n把属性隐藏,提供公共方法对其访问.\n</code></pre>\n<p><strong>private</strong>关键字:</p>\n<pre><code>是一个权限修饰符.\n可以修饰成员变量和成员方法.\n被private修饰的成员只能在本类中访问.\n</code></pre>\n<p>常见应用:</p>\n<pre><code>把成员变量用private修饰,提供对应的getXxx()/setXxx()方法.\n</code></pre>\n<p><strong>this</strong>:</p>\n<pre><code>是当前类的对象引用.简单记,它就代表当前类的一个对象.\n注意:对象调用哪个方法,this就代表谁\n</code></pre>\n<p>this的场景:</p>\n<pre><code>解决局部变量隐藏成员变量.\n</code></pre>\n<p>内存图解:<br><img src=\"/img/this%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE%E8%A7%A3.png\"></p>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><p>构造方法:给对象的数据进行初始化<br>格式:</p>\n<pre><code>A:方法名与类名相同\nB:没有返回值类型,连void都没有\nC:没有具体的返回值\n</code></pre>\n<p>注意事项:</p>\n<pre><code>A:如果没有给出构造方法,系统将会自动提供一个无参构造方法.\nB:如果给出了任意构造方法,系统将不再提供默认的无参构造方法,如果还想使用无参构造方法,就必须自己给出.建议永远自己给出无参构造方法.\n</code></pre>\n<p>给成员变量赋值的两种方法:<br>A:setXxx()<br>B:构造方法</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class Student&#123;\n\tpublic Student()&#123;\n\t\tSystem.out.println(&quot;这是构造方法&quot;);\n\t&#125;\n&#125;\n\nclass ConstructDemo&#123;\n\tpublic static void main(String[] args)&#123;\n\t\t&#x2F;&#x2F;创建对象\n\t\tStudent s &#x3D; new Student();\n\t\tSystem.out.println(s);&#x2F;&#x2F;会输出地址值\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"类的组成\"><a href=\"#类的组成\" class=\"headerlink\" title=\"类的组成\"></a>类的组成</h3><p>类的组成:</p>\n<pre><code>成员变量\n\n成员方法\n1.无参构造方法\n2.带参构造方法\n\n构造方法\ngetXxx()\nsetXxx()\n</code></pre>\n<p>给成员变量赋值的方式</p>\n<pre><code>无参构造方法+setXxx()\n带参构造方法\n</code></pre>\n<p>变量什么时候定义为成员变量?:</p>\n<pre><code>如果这个变量是用来描述这个类的信息的,那么该变量就应该定义为成员变量.\n</code></pre>\n<p>变量定义在哪里好?:</p>\n<pre><code>变量的范围是越小越好,因为能及时的被回收.\n</code></pre>\n<p>根据返回值分类:</p>\n<pre><code>void类型\n非void类型\n</code></pre>\n<p>根据形式参数分类:</p>\n<pre><code>空参方法\n非空参方法\n</code></pre>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class Student &#123;\n\tpublic String getString()&#123;\n\t\treturn &quot;helloworld&quot;;\n\t&#125;\n\tpublic void show()&#123;\n\t\tSystem.out.println(&quot;show&quot;);\n\t&#125;\n\tpublic void method(String name)&#123;\n\t\tSystem.out.println(name);\n\t&#125;\n\tpublic String function(String s1,String s2)&#123;\n\t\tretrun s1 + s2;\n\t&#125;\n&#125;\n\nclass StudentDemo&#123;\n\tpublic static void main(String[] args)&#123;\n\t\t&#x2F;&#x2F;创建对象\n\t\tStudent s &#x3D; new Student();\n\t\t&#x2F;&#x2F;调用无参无返回值方法\n\t\ts.show();\n\t\t&#x2F;&#x2F;调用无参有返回值方法\n\t\tString result &#x3D; s.getString();\n\t\tSystem.out.println(result);\n\t\t&#x2F;&#x2F;调用带参无返回值的方法\n\t\ts.method(&quot;Fatih&quot;);\n\t\t&#x2F;&#x2F;调用带参带返回值的方法\n\t\tString result2 &#x3D; s.function(&quot;hello&quot;,&quot;world&quot;);\n\t\tSystem.out.println(result2);\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"创建对象内存图-1\"><a href=\"#创建对象内存图-1\" class=\"headerlink\" title=\"创建对象内存图\"></a>创建对象内存图</h3><p><img src=\"/img/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.png\"></p>\n<h3 id=\"static关键字\"><a href=\"#static关键字\" class=\"headerlink\" title=\"static关键字\"></a>static关键字</h3><h4 id=\"static关键字特点\"><a href=\"#static关键字特点\" class=\"headerlink\" title=\"static关键字特点:\"></a>static关键字特点:</h4><pre><code>A:随着类的加载而加载. eg:main方法\nB:优先于对象存在.\nC:被类的所有对象共享:\n如果某个成员变量是被所有对象共享的,那么它就应该定义为静态的.\neg:饮水机(用静态修饰),水杯(不能用静态修饰)\nD:可以通过类名调用(本身也可以通过对象名调用)\n推荐使用类名调用\n</code></pre>\n<p>静态修饰的内容一般称其为:与类相关的,类成员.</p>\n<p>static的内存图解:<br><img src=\"/img/static%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE%E8%A7%A3.png\"></p>\n<h4 id=\"static关键字注意事项\"><a href=\"#static关键字注意事项\" class=\"headerlink\" title=\"static关键字注意事项\"></a>static关键字注意事项</h4><pre><code>A:在静态方法中是没有this关键字的\n理解:静态是随着类的加载而加载,this是随着对象的创建而存在的.静态比对象先存在.\n\nB:静态方法只能访问静态的成员变量和静态的成员方法.\n\n静态方法:\n成员变量:只能访问静态变量.\n成员方法:只能访问静态成员方法.\n\n非静态方法:\n成员变量:可以是静态的,也可以是非静态的.\n成员方法:可以是静态的成员方法,也可以是非静态的成员方法.\n\n简单记:静态只能访问静态\n</code></pre>\n<h4 id=\"静态变量和成员变量\"><a href=\"#静态变量和成员变量\" class=\"headerlink\" title=\"静态变量和成员变量\"></a>静态变量和成员变量</h4><p>所属不同</p>\n<pre><code>静态变量属于类,所以也成为类变量.\n成员变量属于对象,所以也成为实例变量(对象变量).\n</code></pre>\n<p>内存中位置不同</p>\n<pre><code>静态变量存储于方法区的静态区.\n成员变量存储于堆内存.\n</code></pre>\n<p>内存出现时间不同</p>\n<pre><code>静态变量随着类的加载而加载,随着类的消失而消失.\n成员变量随着对象的创建而存在,随着对象的消失而消失.\n</code></pre>\n<p>调用不同</p>\n<pre><code>静态变量可以通过类名调用,也可以通过对象调用.\n成员变量只能通过对象名调用.\n</code></pre>\n<h4 id=\"main方法格式详解\"><a href=\"#main方法格式详解\" class=\"headerlink\" title=\"main方法格式详解\"></a>main方法格式详解</h4><pre><code>public static void main (String[] args)&#123;...&#125;\n\npublic:公共的,访问权限是最大的.由于main方法是被jvm调用,所以权限要够大.\n\nstatic:静态的,不需要创建对象,通过类名就可以.方便jvm的调用.\n\nvoid:方法的返回值是返回给调用者,而main方法是被jvm调用.而返回给jvm没有意义.\n\nmain:是一个常见的方法入口.几乎所有语言都是以main作为入口.\n\nString[] args:这是一个字符串数组.(早期是为了接收键盘录入的数据的)\n格式是:java 类名 xxx xxx xxx\n</code></pre>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">class MainDemo&#123;\n\tpublic static void main(String[] args)&#123;\n\t\tSystem.out.println(args);&#x2F;&#x2F;[Ljava.lang.String;@175078b输出一个地址值\n\t\tSystem.out.println(args.length);&#x2F;&#x2F;0\n\t\tSystem.out.println(args[0]);&#x2F;&#x2F;ArrayIndexOutOfBoundsException(越界)\n\n\t\tcmd键入 java MainDemo hello world java\n\t\tSystem.out.println(args);&#x2F;&#x2F;[Ljava.lang.String;@175078b输出一个地址值\n\t\tSystem.out.println(args.length);&#x2F;&#x2F;3\n\t\tSystem.out.println(args[0]);&#x2F;&#x2F;hello\n\t\tSystem.out.println(args[1]);&#x2F;&#x2F;world\n\t\tSystem.out.println(args[2]);&#x2F;&#x2F;java\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"如何实现只能通过类名调用方法\"><a href=\"#如何实现只能通过类名调用方法\" class=\"headerlink\" title=\"如何实现只能通过类名调用方法\"></a>如何实现只能通过类名调用方法</h4><p>类中所有方法都使用静态方法，将构造方法私有，外界就不能再创建对象了，只能通过类名调用。</p>\n","text":"面向对象面向对象思想面向对象是基于面向过程面向过程:强调的是每一个功能的步骤.面向对象:强调的是对象,然后由对象去调用功能(强调结果). 面向对象特点A:是一种更符合我们思想习惯的思想.B:可以将复杂的事情简单化.C:将我们以执行者变成指挥者.eg:自己去打水变成让别人去打水. ...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">面向对象思想</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">面向对象特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BE%E4%BE%8B%E4%B9%B0%E7%94%B5%E8%84%91\"><span class=\"toc-text\">举例买电脑</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BE%E4%BE%8B%E6%8A%8A%E5%A4%A7%E8%B1%A1%E8%A3%85%E8%BF%9B%E5%86%B0%E7%AE%B1\"><span class=\"toc-text\">举例把大象装进冰箱</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">面向过程:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-1\"><span class=\"toc-text\">面向对象:</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BC%80%E5%8F%91%E3%80%81%E8%AE%BE%E8%AE%A1%E5%8F%8A%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">面向对象开发、设计及特征</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">类的定义和概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">创建对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">成员变量和局部变量的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E7%B1%BB%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">在类中的位置不同</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">在内存中的位置不同</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">生命周期不同</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%80%BC%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">初始化值不同</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE\"><span class=\"toc-text\">创建对象内存图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">形式参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">匿名对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">封装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">构造方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E7%BB%84%E6%88%90\"><span class=\"toc-text\">类的组成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE-1\"><span class=\"toc-text\">创建对象内存图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#static%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">static关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#static%E5%85%B3%E9%94%AE%E5%AD%97%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">static关键字特点:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#static%E5%85%B3%E9%94%AE%E5%AD%97%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">static关键字注意事项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">静态变量和成员变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#main%E6%96%B9%E6%B3%95%E6%A0%BC%E5%BC%8F%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">main方法格式详解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87%E7%B1%BB%E5%90%8D%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">如何实现只能通过类名调用方法</span></a></li></ol></li></ol></li></ol>","author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"帮助文档的制作以及使用","uid":"028ef52bbaecf50bd1bcb213347b2846","slug":"帮助文档的制作以及使用","date":"2018-12-06T15:50:11.000Z","updated":"2019-04-05T01:04:53.000Z","comments":true,"path":"api/articles/帮助文档的制作以及使用.json","keywords":null,"cover":null,"text":"制作工具类的说明书（文档注释）文档注释格式： /** * * * * * * */ 字段 @author (作者)@version (版本)@param (参数)@return (返回值) javadoc格式： javadoc -d 目录 -author -version XXX...","link":"","photos":[],"count_time":{"symbolsCount":698,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"数组","date":"2018-12-06T15:03:13.000Z","updated":"2018-12-06T17:49:34.000Z","comments":true,"path":"api/articles/数组.json","keywords":null,"cover":[],"text":"一维数组定义格式:A:数据类型[] 数组名; B:数据类型 数组名[]; eg: A:int[] a; B:int a[]; 推荐使用第一种. 初始化int[] arr &#x3D; new int[3]; &#x2F;*左边: int:说明数组中的元素的数据类型是int类型. ...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}