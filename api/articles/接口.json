{"title":"接口","uid":"8aba8af17209e23865c30ccb831564d2","slug":"接口","date":"2018-12-10T02:22:34.000Z","updated":"2019-04-05T01:05:23.000Z","comments":true,"path":"api/articles/接口.json","keywords":null,"cover":null,"content":"<h2 id=\"接口概述\"><a href=\"#接口概述\" class=\"headerlink\" title=\"接口概述\"></a>接口概述</h2><p>为了体现事物功能的扩展性，Java中就提供了接口来定义这些额外功能，并不给出具体实现。</p>\n<h2 id=\"接口特点\"><a href=\"#接口特点\" class=\"headerlink\" title=\"接口特点\"></a>接口特点</h2><p>1.接口用关键字interface表示</p>\n<ul>\n<li>格式：interface 接口名{}</li>\n</ul>\n<p>2.类实现接口用implements表示</p>\n<ul>\n<li>格式：class 类名 implements 接口名{}</li>\n</ul>\n<p>3.接口不能实例化</p>\n<ul>\n<li>可以按照多态的方式来实例化<br>A:具体类多态(几乎没有)<br>B:抽象类多态(常用)<br>C:接口多态(最常用)</li>\n</ul>\n<p>4.接口的子类<br>a:可以是抽象类,但是意义不大.<br>b:可以是具体类,要重写接口中的所有抽象方法.(主要用法)</p>\n<h2 id=\"接口成员特点\"><a href=\"#接口成员特点\" class=\"headerlink\" title=\"接口成员特点\"></a>接口成员特点</h2><p>成员变量:</p>\n<ul>\n<li>只能是常量</li>\n<li>默认修饰符 public static final（建议自己写出来，比较明确，不宜出错）<br>构造方法:</li>\n<li>接口没有构造方法。因为接口主要是扩展功能，而没有具体存在。<br>成员方法:</li>\n<li>只能是抽象方法</li>\n<li>默认修饰符 public abstract（建议自己写出来，比较明确，不宜出错）</li>\n</ul>\n<p>所有类都默认继承自一个类：object<br>类 object 是类层次结构的根类。每个类都使用 object 作为超类。</p>\n<h2 id=\"接口实现类格式-命名规则\"><a href=\"#接口实现类格式-命名规则\" class=\"headerlink\" title=\"接口实现类格式(命名规则)\"></a>接口实现类格式(命名规则)</h2><ul>\n<li><p>接口名+Impl这种格式是接口的实现类格式</p>\n<pre><code>  class InterImpl implements Inter&#123;\n\n  &#125;\n  //InterImpl\n</code></pre>\n</li>\n</ul>\n<h2 id=\"类与类-类与接口-接口与接口的关系\"><a href=\"#类与类-类与接口-接口与接口的关系\" class=\"headerlink\" title=\"类与类,类与接口,接口与接口的关系\"></a>类与类,类与接口,接口与接口的关系</h2><p>类与类</p>\n<ul>\n<li>继承关系，只能单继承，但是可以多层继承。<br>类与接口</li>\n<li>实现关系，可以单实现，也可以多实现。还可以在继承一个类的同时实现多个接口。<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">interface Father&#123;\n\tpublic abstract void show();\n&#125;\ninterface Mother&#123;\n\tpublic abstract void show2();\n&#125;\n\nclass Son extends Object implements Father,Mother&#123;\n\tpublic void show()&#123;\n\t\tSystem.out.println(&quot;show son&quot;);\n\t&#125;\n\tpublic void show2()&#123;\n\t\tSystem.out.println(&quot;show2 son&quot;);\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n接口与接口</li>\n<li>继承关系，可以单继承，也可以多继承。<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">interface Father&#123;\n\tpublic abstract void show();\n&#125;\ninterface Mother&#123;\n\tpublic abstract void show2();\n&#125;\n\ninterface Sister extends Father,Mother&#123;\n\t&#x2F;*\n\t等于继承了\n\tpublic abstract void show();\n\tpublic abstract void show2();\n\t*&#x2F;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"抽象类和接口的区别\"><a href=\"#抽象类和接口的区别\" class=\"headerlink\" title=\"抽象类和接口的区别\"></a>抽象类和接口的区别</h2><p>成员区别</p>\n<ul>\n<li>抽象类:变量,常量;有抽象方法;抽象方法,非抽象方法.</li>\n<li>接口:常量;抽象方法.<br>关系区别</li>\n<li>类与类:继承,单继承</li>\n<li>类与接口:实现,单实现,多实现</li>\n<li>接口与接口:继承,单继承,多继承<br>设计理念区别</li>\n<li>抽象类:被继承体现的是:”is a”的关系.共性功能.抽象类中定义的是该继承体系的共性功能.</li>\n<li>接口:被实现体现的是:”like a”的关系.扩展功能.接口中定义的是该继承体系的扩展功能.</li>\n</ul>\n","text":"接口概述为了体现事物功能的扩展性，Java中就提供了接口来定义这些额外功能，并不给出具体实现。 接口特点1.接口用关键字interface表示 格式：interface 接口名{} 2.类实现接口用implements表示 格式：class 类名 implements 接口名{}...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">接口概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">接口特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E6%88%90%E5%91%98%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">接口成员特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%A0%BC%E5%BC%8F-%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">接口实现类格式(命名规则)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E4%B8%8E%E7%B1%BB-%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">类与类,类与接口,接口与接口的关系</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">抽象类和接口的区别</span></a></li></ol>","author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"运动员与教练练习题","uid":"6831cd9b2cda379b7d3cdbe218da0894","slug":"运动员与教练练习题","date":"2018-12-10T12:29:11.000Z","updated":"2021-06-28T15:27:50.624Z","comments":true,"path":"api/articles/运动员与教练练习题.json","keywords":null,"cover":[],"text":"例题概况 乒乓球运动员和篮球运动员 乒乓球教练和篮球教练 为了出国交流,跟乒乓球相关的人员都需要学习英语 分析 这个案例哪些需要抽象类,哪些接口,哪些具体类 例题分析抽象类：人、运动员、教练具体类：乒乓球运动员、篮球运动员、乒乓球教练、篮球教练接口：学习英语—乒乓球运动员、乒乓球...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"例题","slug":"例题","count":2,"path":"api/tags/例题.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"抽象类","uid":"166ef0124d1706b7cbddeea81ab00167","slug":"抽象类","date":"2018-12-09T01:34:55.000Z","updated":"2019-04-05T01:05:11.000Z","comments":true,"path":"api/articles/抽象类.json","keywords":null,"cover":null,"text":"抽象类概括在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类。 抽象类的特点1.抽象类和抽象方法必须用abstract关键字修饰 格式 abstract class 类名{} public abstract void eat(); 2...","link":"","photos":[],"count_time":{"symbolsCount":630,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}