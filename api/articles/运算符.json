{"title":"运算符","uid":"88ea152c24a2e3533911145f0433ed7c","slug":"运算符","date":"2021-06-30T11:03:10.000Z","updated":"2021-07-12T16:55:44.087Z","comments":true,"path":"api/articles/运算符.json","keywords":null,"cover":null,"content":"<h1 id=\"运算符分类\"><a href=\"#运算符分类\" class=\"headerlink\" title=\"运算符分类\"></a>运算符分类</h1><table>\n<thead>\n<tr>\n<th align=\"center\">运算符分类</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">算数运算符（二元运算符）</td>\n<td align=\"center\">+，-，*，/，%</td>\n</tr>\n<tr>\n<td align=\"center\">算数运算符（一元运算符）</td>\n<td align=\"center\">++，–</td>\n</tr>\n<tr>\n<td align=\"center\">赋值运算符</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"center\">扩展运算符</td>\n<td align=\"center\">+=，-=，*=，/=</td>\n</tr>\n<tr>\n<td align=\"center\">关系运算符</td>\n<td align=\"center\">&gt;，&lt;，&gt;=，&lt;=，==，!= instanceof</td>\n</tr>\n<tr>\n<td align=\"center\">逻辑运算符</td>\n<td align=\"center\">&amp;&amp;，||，!，^</td>\n</tr>\n<tr>\n<td align=\"center\">位运算符</td>\n<td align=\"center\">&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;</td>\n</tr>\n<tr>\n<td align=\"center\">条件运算符</td>\n<td align=\"center\">?:</td>\n</tr>\n<tr>\n<td align=\"center\">字符串连接符</td>\n<td align=\"center\">+</td>\n</tr>\n</tbody></table>\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><p>+，-，*，/，%属于二元运算符，二元运算符指的是需要两个操作数才能完成运算的运算符。其中的%是取模运算符，就是我们常说的求余数操作。</p>\n<p>++（自增），–（自减）属于一元运算符，该类运算符之需要一个操作数。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//先赋值，后自增。  b = 11;</span>\nc <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//先自增，后赋值。  c = 10;</span>\nb1 <span class=\"token operator\">=</span> a<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//先赋值，后自增。  b1 = 9;</span>\nc1 <span class=\"token operator\">=</span> <span class=\"token operator\">--</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//先自增，后赋值。  c1 = 10;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"赋值及其扩展运算符\"><a href=\"#赋值及其扩展运算符\" class=\"headerlink\" title=\"赋值及其扩展运算符\"></a>赋值及其扩展运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">用法举例</th>\n<th align=\"center\">等效的表达式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+=</td>\n<td align=\"center\">a+=b</td>\n<td align=\"center\">a=a+b</td>\n</tr>\n<tr>\n<td align=\"center\">-=</td>\n<td align=\"center\">a-=b</td>\n<td align=\"center\">a=a-b</td>\n</tr>\n<tr>\n<td align=\"center\">*=</td>\n<td align=\"center\">a*=b</td>\n<td align=\"center\">a=a*b</td>\n</tr>\n<tr>\n<td align=\"center\">/=</td>\n<td align=\"center\">a/=b</td>\n<td align=\"center\">a=a/b</td>\n</tr>\n<tr>\n<td align=\"center\">%=</td>\n<td align=\"center\">a%=b</td>\n<td align=\"center\">a=a&amp;b</td>\n</tr>\n</tbody></table>\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">==</td>\n<td align=\"center\">等于</td>\n<td align=\"center\">a==b</td>\n</tr>\n<tr>\n<td align=\"center\">!=</td>\n<td align=\"center\">不等于</td>\n<td align=\"center\">a!=b</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\">大于</td>\n<td align=\"center\">a&gt;b</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\">小于</td>\n<td align=\"center\">a&lt;b</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;=</td>\n<td align=\"center\">大于或等于</td>\n<td align=\"center\">a&gt;=b</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;=</td>\n<td align=\"center\">小于或等于</td>\n<td align=\"center\">a&lt;=b</td>\n</tr>\n</tbody></table>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&amp;（与）</td>\n<td align=\"center\">逻辑与</td>\n<td align=\"center\">两个操作数为true，结果才是true，否则是false</td>\n</tr>\n<tr>\n<td align=\"center\">|（或）</td>\n<td align=\"center\">逻辑或</td>\n<td align=\"center\">两个操作数有一个是true，结果就是true</td>\n</tr>\n<tr>\n<td align=\"center\">&amp;&amp;（与）</td>\n<td align=\"center\">短路与</td>\n<td align=\"center\">只要有一个为false，则直接返回false</td>\n</tr>\n<tr>\n<td align=\"center\">&#124;&#124;（或）</td>\n<td align=\"center\">短路或</td>\n<td align=\"center\">只要有一个为true，则直接返回true</td>\n</tr>\n<tr>\n<td align=\"center\">!（非）</td>\n<td align=\"center\">逻辑非</td>\n<td align=\"center\">取反：!false为true，!true为false</td>\n</tr>\n<tr>\n<td align=\"center\">^（异或）</td>\n<td align=\"center\">逻辑异或</td>\n<td align=\"center\">相同为false，不同为true</td>\n</tr>\n</tbody></table>\n<p><strong>短路操作</strong>：以||（短路或）为例，只要程序执行发现一个true就直接输出true，不再做后续运算。 例：true || false（不判断，直接输出true） = true</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">boolean b1 &#x3D; true &amp; false; &#x2F;&#x2F;flase\nboolean b2 &#x3D; true | false; &#x2F;&#x2F;true\nboolean b3 &#x3D; !b2; &#x2F;&#x2F;false\nboolean b4 &#x3D; true^true; &#x2F;&#x2F;false\nboolean b5 &#x3D; 3&lt;4 || (4&lt;4&#x2F;0); &#x2F;&#x2F;true <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>运算</th>\n<th>举例</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>3 &lt;&lt; 2 = 12 -&gt; 3 * 2 * 2 = 12</td>\n<td align=\"center\">左移运算符，左移1位相当于乘2</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>3 &gt;&gt; 1 = 1 -&gt; 3 / 2 = 1</td>\n<td align=\"center\">右移运算符，右移1位相当除2取商</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>无符号左移</td>\n<td>3&gt;&gt;&gt;1 = 1 -&gt; 3 / 2 = 1</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>与运算</td>\n<td>6 &amp; 3 = 2</td>\n<td align=\"center\">按位与</td>\n</tr>\n<tr>\n<td>&#124;</td>\n<td>或运算</td>\n<td>6 &#124; 3 = 7</td>\n<td align=\"center\">按位或</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或运算</td>\n<td>6 ^ 3 = 5</td>\n<td align=\"center\">按位异或</td>\n</tr>\n<tr>\n<td>~</td>\n<td>反码</td>\n<td>~6 = 7</td>\n<td align=\"center\">取反</td>\n</tr>\n</tbody></table>\n<p>要做位运算,首先要把数据转换为二进制. 注 : 二进制补码运算</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">int m &#x3D; 3;\nint n &#x3D; 7;\nint p1 &#x3D; m&amp;n; &#x2F;&#x2F;3&amp;7 &#x3D; 3  转换为二进制计算，都是1，才是1\nint p2 &#x3D; m|n; &#x2F;&#x2F;3|7 &#x3D; 7  转换为二进制计算，有一位为1，就是1\nint p3 &#x3D; m^n; &#x2F;&#x2F;3^7 &#x3D; 4  转换为二进制计算，有是1，位0，有一位是1，则是1\nint p4 &#x3D; -m; &#x2F;&#x2F;3取反码，结果为-4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"lt-lt-位运算符\"><a href=\"#lt-lt-位运算符\" class=\"headerlink\" title=\"&lt;&lt;位运算符\"></a>&lt;&lt;位运算符</h3><p>&lt;&lt; : 左移(左边最高位丢弃,右边补齐0)</p>\n<p>eg : 3 &lt;&lt; 2 = 3 * 2 * 2 = 12</p>\n<table>\n<thead>\n<tr>\n<th>计算出3的二进制补码:</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>左移2位</td>\n<td>00000000 00000000 00000000 00000011</td>\n</tr>\n<tr>\n<td>最高位(00)舍弃</td>\n<td>00000000 00000000 00000000 00001100</td>\n</tr>\n<tr>\n<td>结论 : 把&lt;&lt;左边的数据*(乘以) 2的移动次幂</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"gt-gt-位运算符\"><a href=\"#gt-gt-位运算符\" class=\"headerlink\" title=\"&gt;&gt;位运算符\"></a>&gt;&gt;位运算符</h3><p>&gt;&gt; : 右移 最高位是0,左边补齐0;最高位是1,左边补齐1</p>\n<p>eg : 24 &gt;&gt; 2 = 24 / 2 ^ 2 = 6</p>\n<table>\n<thead>\n<tr>\n<th>计算出24的二进制补码:</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>右移2位</td>\n<td>00000000 00000000 00000000 00011000</td>\n</tr>\n<tr>\n<td>最高位补齐00</td>\n<td>00000000 00000000 00000000 00000110</td>\n</tr>\n</tbody></table>\n<p>eg : -24 &gt;&gt; 2 = -24 / 2 ^ 2 = -6</p>\n<table>\n<thead>\n<tr>\n<th>计算出-24的二进制补码:</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>右移2位</td>\n<td>11111111 11111111 11111111 11101000</td>\n</tr>\n<tr>\n<td>最高位补齐11</td>\n<td>11111111 11111111 11111111 11111010</td>\n</tr>\n<tr>\n<td>结论 : 把&gt;&gt;左边的数据(除以) 2的移动次幂</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"gt-gt-gt-无符号右移\"><a href=\"#gt-gt-gt-无符号右移\" class=\"headerlink\" title=\"&gt;&gt;&gt;无符号右移\"></a>&gt;&gt;&gt;无符号右移</h3><p>&gt;&gt;&gt; : 无论最高位是0还是1,左边补齐0</p>\n<p>eg : 24 &gt;&gt;&gt; 2 = 6</p>\n<table>\n<thead>\n<tr>\n<th>计算出24的二进制补码:</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>右移2位</td>\n<td>00000000 00000000 00000000 00011000</td>\n</tr>\n<tr>\n<td>最高位补齐00</td>\n<td>00000000 00000000 00000000 00000110</td>\n</tr>\n</tbody></table>\n<p>eg : -24 &gt;&gt;&gt; 2 = 1073741818</p>\n<table>\n<thead>\n<tr>\n<th>计算出-24的二进制补码:</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>右移2位</td>\n<td>11111111 11111111 11111111 11101000</td>\n</tr>\n<tr>\n<td>最高位补齐00</td>\n<td>00111111 11111111 11111111 11111010</td>\n</tr>\n</tbody></table>\n<h3 id=\"amp-位运算-有0则0\"><a href=\"#amp-位运算-有0则0\" class=\"headerlink\" title=\"&amp;位运算(有0则0)\"></a>&amp;位运算(有0则0)</h3><p>eg : 3 &amp; 4 = 0</p>\n<table>\n<thead>\n<tr>\n<th>数值</th>\n<th>转换为二进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>3</td>\n<td>00000000 00000000 00000000 00000011</td>\n</tr>\n<tr>\n<td>4</td>\n<td>00000000 00000000 00000000 00000100</td>\n</tr>\n<tr>\n<td>&amp;位运算后结果为<strong>0</strong></td>\n<td>00000000 00000000 00000000 00000000</td>\n</tr>\n</tbody></table>\n<h3 id=\"位运算-有1则1\"><a href=\"#位运算-有1则1\" class=\"headerlink\" title=\"|位运算(有1则1)\"></a>|位运算(有1则1)</h3><p>eg : 3 &#124; 4 = 7</p>\n<table>\n<thead>\n<tr>\n<th>数值</th>\n<th>转换为二进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>3</td>\n<td>00000000 00000000 00000000 00000011</td>\n</tr>\n<tr>\n<td>4</td>\n<td>00000000 00000000 00000000 00000100</td>\n</tr>\n<tr>\n<td>&#124;位运算后结果为<strong>7</strong></td>\n<td>00000000 00000000 00000000 00000111</td>\n</tr>\n</tbody></table>\n<h3 id=\"位异或运算-相同则0-不同则1\"><a href=\"#位异或运算-相同则0-不同则1\" class=\"headerlink\" title=\"^位异或运算(相同则0,不同则1)\"></a>^位异或运算(相同则0,不同则1)</h3><p>eg : 3 ^ 4 = 7</p>\n<table>\n<thead>\n<tr>\n<th>数值</th>\n<th>转换为二进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>3</td>\n<td>00000000 00000000 00000000 00000011</td>\n</tr>\n<tr>\n<td>4</td>\n<td>00000000 00000000 00000000 00000100</td>\n</tr>\n<tr>\n<td>^位运算后结果为<strong>7</strong></td>\n<td>00000000 00000000 00000000 00000111</td>\n</tr>\n</tbody></table>\n<p>^异或位运算符特点:<br>a = 10 , b = 20<br>(a ^ b ^ b) = 10<br>(a ^ b ^ a) = 20<br>一个数据对另一个数据位异或两次,该数本身不变</p>\n<h3 id=\"按位取反运算符-0变1-1变0\"><a href=\"#按位取反运算符-0变1-1变0\" class=\"headerlink\" title=\"~按位取反运算符(0变1,1变0)\"></a>~按位取反运算符(0变1,1变0)</h3><p>eg : ~3 = -4</p>\n<table>\n<thead>\n<tr>\n<th>数值</th>\n<th>转换为二进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>3</td>\n<td>00000000 00000000 00000000 00000011</td>\n</tr>\n<tr>\n<td>~位运算后结果为**-4**</td>\n<td>11111111 11111111 11111111 11111000(补码)</td>\n</tr>\n<tr>\n<td>补码</td>\n<td>11111111 11111111 11111111 11111000</td>\n</tr>\n<tr>\n<td>反码</td>\n<td>11111111 11111111 11111111 11111011</td>\n</tr>\n<tr>\n<td>原码**(-4)**</td>\n<td>10000000 00000000 00000000 00000100</td>\n</tr>\n</tbody></table>\n<h2 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h2><p>条件运算符 ?:</p>\n<p>a = x? y:z</p>\n<p>x为表达式，返回一个布尔值，若x为true则返回y，若x为false则返回z</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">int y1 &#x3D; 30;\nint y2 &#x3D; 40;\nint minY &#x3D; y1&lt;y2?y1:y2; &#x2F;&#x2F;返回y1\nint z1 &#x3D; 300;\nint z2 &#x3D; 40;\nint minZ &#x3D; z1&lt;z2?z1:z2; &#x2F;&#x2F;返回z2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<h2 id=\"重点-三目运算符\"><a href=\"#重点-三目运算符\" class=\"headerlink\" title=\"重点 : 三目运算符\"></a>重点 : 三目运算符</h2><p>例 :<br>单目运算符 : -3<br>双目运算符 : 3 + 4<br>三目运算符(条件运算符) : </p>\n<pre><code>格式 : 比较表达式 ? 表达式1 : 表达式2\n</code></pre>\n<p>比较表达式 : 结果是一个Boolean类型<br>根据比较表达式的计算返回一个true或者false,如果是true,就将<strong>表达式1</strong>作为结果.如果是false,就把<strong>表达式2</strong>作为结果.</p>\n<p>三目运算符例题 :<br>     比较三个整数的最大值 :</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">int a &#x3D; 10;\nint b &#x3D; 30;\nint c &#x3D; 20;\n&#x2F;&#x2F;分两步\nint temp &#x3D; (a &gt; b) ? a : b;\nint max &#x3D; (temp &gt; c) ? temp : c;\n&#x2F;&#x2F;只一步\nint max1 &#x3D; (a &gt; b) ? ( (a &gt; c) ? a : c ) : ( (b &gt; c) ? b : c );<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","feature":true,"text":"运算符分类 运算符分类 算数运算符（二元运算符） +，-，*，/，% 算数运算符（一元运算符） ++，– 赋值运算符 = 扩展运算符 +=，-=，*=，/= 关系运算符 &gt;，&lt;，&gt;=，&lt;=，==，!= instanceof 逻辑运算符 &amp;&amp;...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">运算符分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">算术运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E5%8F%8A%E5%85%B6%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值及其扩展运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">关系运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">位运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lt-lt-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">&lt;&lt;位运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gt-gt-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">&gt;&gt;位运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gt-gt-gt-%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8F%B3%E7%A7%BB\"><span class=\"toc-text\">&gt;&gt;&gt;无符号右移</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#amp-%E4%BD%8D%E8%BF%90%E7%AE%97-%E6%9C%890%E5%88%990\"><span class=\"toc-text\">&amp;位运算(有0则0)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97-%E6%9C%891%E5%88%991\"><span class=\"toc-text\">|位运算(有1则1)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97-%E7%9B%B8%E5%90%8C%E5%88%990-%E4%B8%8D%E5%90%8C%E5%88%991\"><span class=\"toc-text\">^位异或运算(相同则0,不同则1)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D%E8%BF%90%E7%AE%97%E7%AC%A6-0%E5%8F%981-1%E5%8F%980\"><span class=\"toc-text\">~按位取反运算符(0变1,1变0)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">条件运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E7%82%B9-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">重点 : 三目运算符</span></a></li></ol></li></ol>","author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"万物皆可数字化","uid":"9957c26e2aca0ec5d256552efea4c448","slug":"万物皆可数字化","date":"2021-06-29T13:28:16.000Z","updated":"2021-06-29T16:57:58.293Z","comments":true,"path":"api/articles/万物皆可数字化.json","keywords":null,"cover":[],"text":"万物皆可数字化初始计算机发明时只能进行数字运算，后来计算机可以进行文本处理、图像处理、视频处理、工业控制等等，任何事情只要可以转化成数字就一定可以计算机化。 万物皆可数字化原理 万事万物都有规律；有规律，就可量化；可量化，就能数字化；可数字化，就能二进制化；可二进制化，就能计算机...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}