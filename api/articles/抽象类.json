{"title":"抽象类","uid":"166ef0124d1706b7cbddeea81ab00167","slug":"抽象类","date":"2018-12-09T01:34:55.000Z","updated":"2019-04-05T01:05:11.000Z","comments":true,"path":"api/articles/抽象类.json","keywords":null,"cover":null,"content":"<h2 id=\"抽象类概括\"><a href=\"#抽象类概括\" class=\"headerlink\" title=\"抽象类概括\"></a>抽象类概括</h2><p>在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类。</p>\n<h2 id=\"抽象类的特点\"><a href=\"#抽象类的特点\" class=\"headerlink\" title=\"抽象类的特点\"></a>抽象类的特点</h2><p>1.抽象类和抽象方法必须用abstract关键字修饰</p>\n<ul>\n<li>格式</li>\n<li>abstract class 类名{}</li>\n<li>public abstract void eat();</li>\n</ul>\n<p>2.抽象类不一定有抽象方法，但有抽象方法的类一定是抽象类</p>\n<p>3.抽象类不能实例化</p>\n<ul>\n<li>抽象类如何实例化?</li>\n<li>按照多态的方法，由具体的子类实例化。其实这也是多态的一种，抽象类多态。<br>抽象类有构造方法，但是不能实例化。抽象类中构造方法的作用是用于子类访问父类数据的初始化。</li>\n</ul>\n<p>4.抽象类的子类</p>\n<ul>\n<li>如果不想重写抽象方法，该子类是一个抽象类</li>\n<li>重写所有的抽象方法，这个时候子类是一个具体的类</li>\n</ul>\n<p>5.抽象类的实例化其实是靠具体的子类实现的，是多态的方式。</p>\n<ul>\n<li>Animal a = new Cat();</li>\n</ul>\n<h2 id=\"抽象类的成员特点\"><a href=\"#抽象类的成员特点\" class=\"headerlink\" title=\"抽象类的成员特点\"></a>抽象类的成员特点</h2><p>成员变量</p>\n<ul>\n<li>可以是变量</li>\n<li>也可以是常量<br>构造方法</li>\n<li>有构造方法，但是不能实例化</li>\n<li>构造方法的作用是用于子类访问父类数据的初始化<br>成员方法</li>\n<li>可以有抽象方法 限定子类必须完成某些动作</li>\n<li>也可以有非抽象方法 提高代码复用性</li>\n</ul>\n<h2 id=\"抽象类小问题\"><a href=\"#抽象类小问题\" class=\"headerlink\" title=\"抽象类小问题\"></a>抽象类小问题</h2><p>1.一个类没有抽象方法,但是也可以定义为抽象类.目的是不让创建对象.<br>2.抽象类(abstract)不能喝哪些关键字共存</p>\n<ul>\n<li>private 冲突  (无法被重写)</li>\n<li>final   冲突  (无法被重写)</li>\n<li>static  无意义(抽象没有方法体,所以无意义)</li>\n</ul>\n","text":"抽象类概括在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类。 抽象类的特点1.抽象类和抽象方法必须用abstract关键字修饰 格式 abstract class 类名{} public abstract void eat(); 2...","link":"","photos":[],"count_time":{"symbolsCount":630,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%A6%82%E6%8B%AC\"><span class=\"toc-text\">抽象类概括</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">抽象类的特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">抽象类的成员特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%B0%8F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">抽象类小问题</span></a></li></ol>","author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"接口","uid":"8aba8af17209e23865c30ccb831564d2","slug":"接口","date":"2018-12-10T02:22:34.000Z","updated":"2019-04-05T01:05:23.000Z","comments":true,"path":"api/articles/接口.json","keywords":null,"cover":null,"text":"接口概述为了体现事物功能的扩展性，Java中就提供了接口来定义这些额外功能，并不给出具体实现。 接口特点1.接口用关键字interface表示 格式：interface 接口名{} 2.类实现接口用implements表示 格式：class 类名 implements 接口名{}...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"继承","uid":"0528be18df5e638068d2debce4ac533e","slug":"继承","date":"2018-12-08T02:02:19.000Z","updated":"2021-06-28T13:08:29.367Z","comments":true,"path":"api/articles/继承.json","keywords":null,"cover":[],"text":"概述多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。通过extends关键字可以实现类与类的继承 class 子类名 extends父类名&#123;&#125; 单独的这个类成为父类，基类或者超类；这多个类可以...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}