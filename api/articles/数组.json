{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"数组","date":"2018-12-06T15:03:13.000Z","updated":"2018-12-06T17:49:34.000Z","comments":true,"path":"api/articles/数组.json","keywords":null,"cover":[],"content":"<h2 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h2><h3 id=\"定义格式\"><a href=\"#定义格式\" class=\"headerlink\" title=\"定义格式:\"></a>定义格式:</h3><pre><code>A:数据类型[] 数组名;\nB:数据类型 数组名[];\neg: A:int[] a;\n    B:int a[];\n</code></pre>\n<p>推荐使用第一种.</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">int[] arr &#x3D; new int[3];\n\n&#x2F;*左边:\n\t int:说明数组中的元素的数据类型是int类型.\n\t []:说明这是一个数组.\n\t arr:是数组的名称.\n  右边:\n\t new:为数组分配内存空间.\n\t int:说明数组中的元素的数据类型是int类型.\n\t []:说明这是一个数组.\n\t 3:数组长度,其实也就是数组中元素的个数.\n*&#x2F;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"获取数组元素\"><a href=\"#获取数组元素\" class=\"headerlink\" title=\"获取数组元素\"></a>获取数组元素</h3><p>数组名[索引]<br>索引就是每个元素的编号,从0开始,最大索引是数组的长度-1.</p>\n<h3 id=\"数组内存分配\"><a href=\"#数组内存分配\" class=\"headerlink\" title=\"数组内存分配\"></a>数组内存分配</h3><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">int [] arr &#x3D; new int [3];\nSystem.out.println(arr); &#x2F;&#x2F;地址值\nSystem.out.println(arr[0]); &#x2F;&#x2F;0\nSystem.out.println(arr[1]); &#x2F;&#x2F;0\nSystem.out.println(arr[2]); &#x2F;&#x2F;0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://github.com/n0thingJy/n0thingjy.github.io/blob/master/images/%E9%85%8D%E5%9B%BE/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83.png?raw=true\"></p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F;定义第一个数组\nint[] arr &#x3D; new int[3];\narr[0] &#x3D; 88; &#x2F;&#x2F;88\narr[1] &#x3D; 33; &#x2F;&#x2F;33\narr[2] &#x3D; 66; &#x2F;&#x2F;66\n&#x2F;&#x2F;定义第二个数组\nint[] arr2 &#x3D; new int[3];\narr[0] &#x3D; 22; &#x2F;&#x2F;22\narr[1] &#x3D; 44; &#x2F;&#x2F;44\narr[2] &#x3D; 55; &#x2F;&#x2F;55\n&#x2F;&#x2F;定义第三个数组\nint[] arr3 &#x3D; arr;\narr3[0] &#x3D; 100;&#x2F;&#x2F;100\narr3[1] &#x3D; 200;&#x2F;&#x2F;200\n&#x2F;*改变arr3的值也改变了arr的值,arr的地址值赋给了arr3\n  栈内存的两个引用指向同一个堆内存空间.\n  无论是它们谁的操作,都是针对同一个地方.\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://github.com/n0thingJy/n0thingjy.github.io/blob/master/images/%E9%85%8D%E5%9B%BE/%E6%95%B0%E7%BB%84%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98.png?raw=true\"></p>\n<hr>\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><h3 id=\"定义格式-标准\"><a href=\"#定义格式-标准\" class=\"headerlink\" title=\"定义格式(标准):\"></a>定义格式(标准):</h3><pre><code>数据类型[ ][ ] 数组名 = new 数据类型[m][n];\nm表示这个二维数组有多少个一维数组.\nn表示每一个一维数组的元素个数.\n</code></pre>\n<h3 id=\"其他格式\"><a href=\"#其他格式\" class=\"headerlink\" title=\"其他格式:\"></a>其他格式:</h3><pre><code>a:数据类型 数组名[ ][ ] = new 数据类型[m][n];\nb:数据类型[ ] 数组名[ ] = new 数据类型[m][n];\nc:数据类型[ ][ ] 数组名 = new 数据类型[m][n];(标准)\nd:数据类型[ ][ ] 数组名 = new 数据类型[m][ ];(一维数组元素个数可以动态给出)\ne:数据类型[ ][ ] 数组名 = new 数据类型[ ][ ]&#123;&#123;元素...&#125;,&#123;元素...&#125;,&#123;元素...&#125;&#125;;(直接赋值)\nf:数据类型[ ][ ] 数组名 = &#123;&#123;元素...&#125;,&#123;元素...&#125;,&#123;元素...&#125;&#125;;(e的简化版)\n</code></pre>\n<hr>\n<h2 id=\"传递值问题\"><a href=\"#传递值问题\" class=\"headerlink\" title=\"传递值问题\"></a>传递值问题</h2><pre><code>基本类型传递值   ---&gt;   值(不改变方法中调用的值)\n引用类型传递值   ---&gt;   地址值(改变方法中调用的值)\n</code></pre>\n","text":"一维数组定义格式:A:数据类型[] 数组名; B:数据类型 数组名[]; eg: A:int[] a; B:int a[]; 推荐使用第一种. 初始化int[] arr &#x3D; new int[3]; &#x2F;*左边: int:说明数组中的元素的数据类型是int类型. ...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">一维数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">定义格式:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">初始化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">获取数组元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\"><span class=\"toc-text\">数组内存分配</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">二维数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E6%A0%BC%E5%BC%8F-%E6%A0%87%E5%87%86\"><span class=\"toc-text\">定义格式(标准):</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">其他格式:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E9%80%92%E5%80%BC%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">传递值问题</span></a></li></ol>","author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"面向对象","uid":"43b177c0ef2e494c11cddc986521f4d9","slug":"面向对象","date":"2018-12-06T15:03:21.000Z","updated":"2021-06-28T15:29:40.784Z","comments":true,"path":"api/articles/面向对象.json","keywords":null,"cover":[],"text":"面向对象面向对象思想面向对象是基于面向过程面向过程:强调的是每一个功能的步骤.面向对象:强调的是对象,然后由对象去调用功能(强调结果). 面向对象特点A:是一种更符合我们思想习惯的思想.B:可以将复杂的事情简单化.C:将我们以执行者变成指挥者.eg:自己去打水变成让别人去打水. ...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"内存","uid":"966fe18182df54e4070010e55431368b","slug":"内存","date":"2018-12-06T15:02:32.000Z","updated":"2019-04-05T01:04:44.000Z","comments":true,"path":"api/articles/内存.json","keywords":null,"cover":null,"text":"内存介绍栈内存:存放的是局部变量.(局部变量:在方法定义中或者方法声明上的变量都称为局部变量) 堆内存:存放的是所有new出来的东西. 堆内存的特点A:每一个new出来的东西都有地址值. B:每个变量都有默认值. byte、short、int、long 默认值都是 0 float...","link":"","photos":[],"count_time":{"symbolsCount":288,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}