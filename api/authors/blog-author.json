{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}},"post_list":[{"title":"数据类型","uid":"a760ef6d11a2d6078a812f5bc31cf898","slug":"数据类型","date":"2021-06-29T12:46:24.000Z","updated":"2021-06-29T13:26:12.143Z","comments":true,"path":"api/articles/数据类型.json","keywords":null,"cover":null,"text":"数据类型数据类型分类 数据类型分为两大类：基本数据类型 和 引用数据类型 基本数据类型(4类8种) 基本数据类型又分为三种数值型、字符型、布尔型 整数类型 整数类型 占用字节数(8位等于1字节) 表述范围 byte 8位 -2^7 ~ 2^7 - 1（-128 ~ 127） sh...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"变量","uid":"66ac6fe79dbb9aa78f5e1cf305b49e4a","slug":"变量","date":"2021-06-29T12:15:20.000Z","updated":"2021-06-29T12:44:52.755Z","comments":true,"path":"api/articles/变量.json","keywords":null,"cover":null,"text":"变量变量是编程最重要的概念 变量的本质 变量的本质是代表一个“可操作的存储空间”空间位置是确定的，但是里面放置什么值不确定，我们可通过变量名来访问“对应的存储空间”，从而操作这个“存储空间”存储的值。 类似于停车场的车位，一个变量相当于一个停车位，可以通过停车位的名字找到对应的位...","link":"","photos":[],"count_time":{"symbolsCount":376,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"注释、标识符、Java关键字","uid":"621c99ff5b1dfe57d5970079f11b1ad3","slug":"见名之意","date":"2021-06-29T11:48:18.000Z","updated":"2021-06-29T12:36:19.717Z","comments":true,"path":"api/articles/见名之意.json","keywords":null,"cover":[],"text":"注释、标识符、Java关键字学习注释、标识符、Java关键字，好名字就要见名知意。 标识符标识符是用来给变量、类、方法以及包进行命名的，标识符需要遵守4个规则。 标识符必须以字母、下划线_、美元符号$开头 标识符其他部分可以是字母、下划线“_”、美元符“$”和数字的任意组合。 J...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"JVM JRE JDK的概念","uid":"d35aa27c88d9129f36d1edc973a2e52a","slug":"JDK的概念","date":"2021-06-29T10:13:49.000Z","updated":"2021-06-29T11:34:10.441Z","comments":true,"path":"api/articles/JDK的概念.json","keywords":null,"cover":null,"text":"JVM JRE JDK的概念 学习JVM JRE JDK的概念以及相互之间的关系 JVM是什么？ JVM的全称是Java Virtual Machine，翻译过来就是叫虚拟计算机，它主要负责Java程序的运行。 提示 边解释、边运行 Java程序是在Java虚拟机上直接运行，而不...","link":"","photos":[],"count_time":{"symbolsCount":647,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"利用Hexo搭建blog","uid":"9978971f2d070c10eec917053c6beae2","slug":"安装hexo","date":"2021-06-28T15:31:36.000Z","updated":"2021-06-28T16:57:59.301Z","comments":true,"path":"api/articles/安装hexo.json","keywords":null,"cover":null,"text":"利用Hexo搭建blogHexo介绍Hexo是一款快速、简洁且高效的博客框架，Hexo官方网站 Hexo搭建步骤1.安装Git2.安装Node.js3.安装Hexo 首先安装GitmacOS安装Git，Git官方网站首先安装Howbrew，由于官网命令会报错，所以选择清华源。终端...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"配置环境","slug":"配置环境","count":1,"path":"api/categories/配置环境.json"}],"tags":[{"name":"Hexo","slug":"Hexo","count":1,"path":"api/tags/Hexo.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Git是什么？","uid":"079ca4b962925da31ee3129301d8960d","slug":"Git是什么","date":"2021-06-28T10:41:13.000Z","updated":"2021-06-28T10:41:51.923Z","comments":true,"path":"api/articles/Git是什么.json","keywords":null,"cover":null,"text":"Git是什么？&emsp;&emsp;Git是目前世界上最先进的分布式版本控制系统。 什么是版本控制系统？&emsp;&emsp;能自动帮助记录每次文件的改动，还可以让他人协作编辑。 Git的诞生&emsp;&emsp;很多人都知道，Linus在1991年创建了开源的Linux，...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Git","slug":"Git","count":1,"path":"api/categories/Git.json"}],"tags":[{"name":"Git学习","slug":"Git学习","count":1,"path":"api/tags/Git学习.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"内部类","uid":"bc67f746267711d34d7d01392a094498","slug":"内部类","date":"2019-04-05T01:50:16.000Z","updated":"2019-04-05T19:04:46.000Z","comments":true,"path":"api/articles/内部类.json","keywords":null,"cover":null,"text":"内部类内部类概述把类定义在其他类的内部,这个类就被称为内部类.eg:在类A中定义类B,类B就是内部类 内部类的访问特点 内部类可以直接访问外部类的成员,包括私有. 外部类要访问内部类的成员,必须创建对象. 内部类位置 成员位置(成员内部类) 局部位置(局部内部类) ","link":"","photos":[],"count_time":{"symbolsCount":135,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"修饰符","uid":"7c404b581c0c2649a73faf534a78653e","slug":"修饰符","date":"2019-04-05T01:44:44.000Z","updated":"2019-04-05T01:49:34.000Z","comments":true,"path":"api/articles/修饰符.json","keywords":null,"cover":null,"text":"修饰符权限修饰符权限修饰符:private、默认、protected、public 本类 同一包下(子类和无关类) 不同包下(子类) 不同包下(无关类) private 可以执行 不能访问 不能访问 不能访问 默认 可以执行 可以执行 不能访问 不能访问 protected 可以...","link":"","photos":[],"count_time":{"symbolsCount":756,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"导包练习题","uid":"b45a9784be195b1c2a050ed30caafc39","slug":"导包练习题","date":"2018-12-11T12:22:23.000Z","updated":"2019-04-05T01:03:37.000Z","comments":true,"path":"api/articles/导包练习题.json","keywords":null,"cover":null,"text":"package，import，class有没有顺序关系package&gt;import&gt;classpackage:只能有一个import:可以有多个class:可以有多个，但是建议是一个 ","link":"","photos":[],"count_time":{"symbolsCount":98,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"例题","slug":"例题","count":2,"path":"api/tags/例题.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"package概述及作用","uid":"4dfc24012675b059867bcf499de79b27","slug":"package概述及作用","date":"2018-12-11T08:22:23.000Z","updated":"2019-04-05T01:47:05.000Z","comments":true,"path":"api/articles/package概述及作用.json","keywords":null,"cover":null,"text":"包的概述 其实就是文件夹 作用:a:把相同的类名放到不同的包中b:对类进行分类管理 eg:学生:增删改查老师:增删改查 方1:按照功能分 cn.school.add AddStudent AddTeacher cn.school.delete DeleteStudent Dele...","link":"","photos":[],"count_time":{"symbolsCount":827,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"形式参数和返回值的问题","uid":"f0dff90444263315eec834dbee6f43a2","slug":"形式参数和返回值的问题","date":"2018-12-11T01:15:54.000Z","updated":"2019-04-05T01:05:03.000Z","comments":true,"path":"api/articles/形式参数和返回值的问题.json","keywords":null,"cover":null,"text":"形式参数基本类型引用类型: 类名: (需要该类的对象) class Student&#123; public void study()&#123; System.out.println(&quot;学习&quot;); &#125; &#125; class StudentDem...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"运动员与教练练习题","uid":"6831cd9b2cda379b7d3cdbe218da0894","slug":"运动员与教练练习题","date":"2018-12-10T12:29:11.000Z","updated":"2021-06-28T15:27:50.624Z","comments":true,"path":"api/articles/运动员与教练练习题.json","keywords":null,"cover":[],"text":"例题概况 乒乓球运动员和篮球运动员 乒乓球教练和篮球教练 为了出国交流,跟乒乓球相关的人员都需要学习英语 分析 这个案例哪些需要抽象类,哪些接口,哪些具体类 例题分析抽象类：人、运动员、教练具体类：乒乓球运动员、篮球运动员、乒乓球教练、篮球教练接口：学习英语—乒乓球运动员、乒乓球...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"例题","slug":"例题","count":2,"path":"api/tags/例题.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"接口","uid":"8aba8af17209e23865c30ccb831564d2","slug":"接口","date":"2018-12-10T02:22:34.000Z","updated":"2019-04-05T01:05:23.000Z","comments":true,"path":"api/articles/接口.json","keywords":null,"cover":null,"text":"接口概述为了体现事物功能的扩展性，Java中就提供了接口来定义这些额外功能，并不给出具体实现。 接口特点1.接口用关键字interface表示 格式：interface 接口名{} 2.类实现接口用implements表示 格式：class 类名 implements 接口名{}...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"抽象类","uid":"166ef0124d1706b7cbddeea81ab00167","slug":"抽象类","date":"2018-12-09T01:34:55.000Z","updated":"2019-04-05T01:05:11.000Z","comments":true,"path":"api/articles/抽象类.json","keywords":null,"cover":null,"text":"抽象类概括在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类。 抽象类的特点1.抽象类和抽象方法必须用abstract关键字修饰 格式 abstract class 类名{} public abstract void eat(); 2...","link":"","photos":[],"count_time":{"symbolsCount":630,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"继承","uid":"0528be18df5e638068d2debce4ac533e","slug":"继承","date":"2018-12-08T02:02:19.000Z","updated":"2021-06-28T13:08:29.367Z","comments":true,"path":"api/articles/继承.json","keywords":null,"cover":[],"text":"概述多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。通过extends关键字可以实现类与类的继承 class 子类名 extends父类名&#123;&#125; 单独的这个类成为父类，基类或者超类；这多个类可以...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"代码块","uid":"efa8c010c59ff382983a4c1b80223f3a","slug":"代码块","date":"2018-12-07T02:42:11.000Z","updated":"2019-04-05T01:04:38.000Z","comments":true,"path":"api/articles/代码块.json","keywords":null,"cover":null,"text":"代码块在Java中，使用{}括起来的代码被称为代码块，根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块。 局部代码块在方法中出现；限定变量生命周期，及早释放，提高内存利用率。 public static void main(String[] args...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"帮助文档的制作以及使用","uid":"028ef52bbaecf50bd1bcb213347b2846","slug":"帮助文档的制作以及使用","date":"2018-12-06T15:50:11.000Z","updated":"2019-04-05T01:04:53.000Z","comments":true,"path":"api/articles/帮助文档的制作以及使用.json","keywords":null,"cover":null,"text":"制作工具类的说明书（文档注释）文档注释格式： /** * * * * * * */ 字段 @author (作者)@version (版本)@param (参数)@return (返回值) javadoc格式： javadoc -d 目录 -author -version XXX...","link":"","photos":[],"count_time":{"symbolsCount":698,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"面向对象","uid":"43b177c0ef2e494c11cddc986521f4d9","slug":"面向对象","date":"2018-12-06T15:03:21.000Z","updated":"2021-06-28T15:29:40.784Z","comments":true,"path":"api/articles/面向对象.json","keywords":null,"cover":[],"text":"面向对象面向对象思想面向对象是基于面向过程面向过程:强调的是每一个功能的步骤.面向对象:强调的是对象,然后由对象去调用功能(强调结果). 面向对象特点A:是一种更符合我们思想习惯的思想.B:可以将复杂的事情简单化.C:将我们以执行者变成指挥者.eg:自己去打水变成让别人去打水. ...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"数组","date":"2018-12-06T15:03:13.000Z","updated":"2018-12-06T17:49:34.000Z","comments":true,"path":"api/articles/数组.json","keywords":null,"cover":[],"text":"一维数组定义格式:A:数据类型[] 数组名; B:数据类型 数组名[]; eg: A:int[] a; B:int a[]; 推荐使用第一种. 初始化int[] arr &#x3D; new int[3]; &#x2F;*左边: int:说明数组中的元素的数据类型是int类型. ...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"内存","uid":"966fe18182df54e4070010e55431368b","slug":"内存","date":"2018-12-06T15:02:32.000Z","updated":"2019-04-05T01:04:44.000Z","comments":true,"path":"api/articles/内存.json","keywords":null,"cover":null,"text":"内存介绍栈内存:存放的是局部变量.(局部变量:在方法定义中或者方法声明上的变量都称为局部变量) 堆内存:存放的是所有new出来的东西. 堆内存的特点A:每一个new出来的东西都有地址值. B:每个变量都有默认值. byte、short、int、long 默认值都是 0 float...","link":"","photos":[],"count_time":{"symbolsCount":288,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"转义字符","uid":"ccc6d908234d53adbdf0dbdbe397c4b9","slug":"转义字符","date":"2018-12-06T15:02:13.000Z","updated":"2018-12-06T15:05:26.000Z","comments":true,"path":"api/articles/转义字符.json","keywords":null,"cover":null,"text":"转义字符&#39;\\t&#39; tab键的位置 &#39;\\r&#39; 回车 &#39;\\n&#39; 换行 ","link":"","photos":[],"count_time":{"symbolsCount":58,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"选择结构","uid":"acac08cfdbc1a7f3ce719da524fb29ff","slug":"选择结构","date":"2018-12-06T14:40:07.000Z","updated":"2018-12-06T15:38:50.000Z","comments":true,"path":"api/articles/选择结构.json","keywords":null,"cover":null,"text":"选择结构(switch)switch语句结构 : switch(表达式)&#123; case值1: 语句体1; break; case值2: 语句体2; break; ... default: 语句体n+1; break;&#125; 格式解释 : switch:表示这是swi...","link":"","photos":[],"count_time":{"symbolsCount":601,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"运算符","uid":"88ea152c24a2e3533911145f0433ed7c","slug":"运算符","date":"2018-12-05T17:47:10.000Z","updated":"2019-04-05T01:47:51.000Z","comments":true,"path":"api/articles/运算符.json","keywords":null,"cover":null,"text":"逻辑运算符 运算符 含义 用法 结合方向 &amp;&amp;、&amp; 逻辑与 op1&amp;&amp;op2 从左到右 &#124;&#124; 逻辑或 op1&#124;&#124;op2 从左到右 ! 逻辑非 !op 从右到左 位运算符 运算符 运算 举例 &lt;&...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ASCII码表","uid":"4f8fbf9c37c8afa969e05d92a1534095","slug":"ASCII码表","date":"2018-12-05T17:39:56.000Z","updated":"2021-06-28T15:28:24.188Z","comments":true,"path":"api/articles/ASCII码表.json","keywords":null,"cover":[],"text":"ASCII码表ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO/IE...","link":"","photos":[],"count_time":{"symbolsCount":176,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"二进制、原码、反码、补码问题","uid":"a6e05bc12d9ba8fdabdade796d228b64","slug":"二进制","date":"2018-12-04T16:30:14.000Z","updated":"2018-12-05T17:36:36.000Z","comments":true,"path":"api/articles/二进制.json","keywords":null,"cover":[],"text":"字节大小1 byte = 8 bit1 k = 1024 byte一个字节是八位eg : 00100100(这是一个字节) 进制组成与换算二进制二进制(0b开头,由0,1组成)eg : (10110110) = 2^7*1 + 2^6*0 + 2^5*1 + 2^4*1 + 2^...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Java初学小问题","uid":"2d4d48a350a521898b927365c75c84ac","slug":"Java初学小问题","date":"2018-12-04T14:00:14.000Z","updated":"2018-12-04T16:24:53.000Z","comments":true,"path":"api/articles/Java初学小问题.json","keywords":null,"cover":null,"text":"CMD编译格式javac + 文件名+ 扩展名 eg : javac HelloWorld.java (编译)java + 类名(不加扩展名) eg : java HelloWorld (执行) Java标识符及命名规则(见名知意)标识符组成 数字、字母、$、_ 注意 : Jav...","link":"","photos":[],"count_time":{"symbolsCount":489,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":20,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2018-12-04T11:11:51.000Z","updated":"2018-12-04T11:11:51.000Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}],"categories":3,"tags":31,"word_count":"40k","post_count":27}