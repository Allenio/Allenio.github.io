{"total":25,"pageSize":12,"pageCount":3,"data":[{"title":"继承","uid":"0528be18df5e638068d2debce4ac533e","slug":"继承","date":"2018-12-08T02:02:19.000Z","updated":"2021-06-28T13:08:29.367Z","comments":true,"path":"api/articles/继承.json","cover":[],"text":"概述多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。通过extends关键字可以实现类与类的继承 class 子类名 extends父类名&#123;&#125; 单独的这个类成为父类，基类或者超类；这多个类可以...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"代码块","uid":"efa8c010c59ff382983a4c1b80223f3a","slug":"代码块","date":"2018-12-07T02:42:11.000Z","updated":"2019-04-05T01:04:38.000Z","comments":true,"path":"api/articles/代码块.json","cover":null,"text":"代码块在Java中，使用{}括起来的代码被称为代码块，根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块。 局部代码块在方法中出现；限定变量生命周期，及早释放，提高内存利用率。 public static void main(String[] args...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"帮助文档的制作以及使用","uid":"028ef52bbaecf50bd1bcb213347b2846","slug":"帮助文档的制作以及使用","date":"2018-12-06T15:50:11.000Z","updated":"2019-04-05T01:04:53.000Z","comments":true,"path":"api/articles/帮助文档的制作以及使用.json","cover":null,"text":"制作工具类的说明书（文档注释）文档注释格式： /** * * * * * * */ 字段 @author (作者)@version (版本)@param (参数)@return (返回值) javadoc格式： javadoc -d 目录 -author -version XXX...","link":"","photos":[],"count_time":{"symbolsCount":698,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"面向对象","uid":"43b177c0ef2e494c11cddc986521f4d9","slug":"面向对象","date":"2018-12-06T15:03:21.000Z","updated":"2021-06-28T15:29:40.784Z","comments":true,"path":"api/articles/面向对象.json","cover":[],"text":"面向对象面向对象思想面向对象是基于面向过程面向过程:强调的是每一个功能的步骤.面向对象:强调的是对象,然后由对象去调用功能(强调结果). 面向对象特点A:是一种更符合我们思想习惯的思想.B:可以将复杂的事情简单化.C:将我们以执行者变成指挥者.eg:自己去打水变成让别人去打水. ...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"数组","date":"2018-12-06T15:03:13.000Z","updated":"2018-12-06T17:49:34.000Z","comments":true,"path":"api/articles/数组.json","cover":[],"text":"一维数组定义格式:A:数据类型[] 数组名; B:数据类型 数组名[]; eg: A:int[] a; B:int a[]; 推荐使用第一种. 初始化int[] arr &#x3D; new int[3]; &#x2F;*左边: int:说明数组中的元素的数据类型是int类型. ...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"内存","uid":"966fe18182df54e4070010e55431368b","slug":"内存","date":"2018-12-06T15:02:32.000Z","updated":"2019-04-05T01:04:44.000Z","comments":true,"path":"api/articles/内存.json","cover":null,"text":"内存介绍栈内存:存放的是局部变量.(局部变量:在方法定义中或者方法声明上的变量都称为局部变量) 堆内存:存放的是所有new出来的东西. 堆内存的特点A:每一个new出来的东西都有地址值. B:每个变量都有默认值. byte、short、int、long 默认值都是 0 float...","link":"","photos":[],"count_time":{"symbolsCount":288,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"转义字符","uid":"ccc6d908234d53adbdf0dbdbe397c4b9","slug":"转义字符","date":"2018-12-06T15:02:13.000Z","updated":"2018-12-06T15:05:26.000Z","comments":true,"path":"api/articles/转义字符.json","cover":null,"text":"转义字符&#39;\\t&#39; tab键的位置 &#39;\\r&#39; 回车 &#39;\\n&#39; 换行 ","link":"","photos":[],"count_time":{"symbolsCount":58,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"选择结构","uid":"acac08cfdbc1a7f3ce719da524fb29ff","slug":"选择结构","date":"2018-12-06T14:40:07.000Z","updated":"2018-12-06T15:38:50.000Z","comments":true,"path":"api/articles/选择结构.json","cover":null,"text":"选择结构(switch)switch语句结构 : switch(表达式)&#123; case值1: 语句体1; break; case值2: 语句体2; break; ... default: 语句体n+1; break;&#125; 格式解释 : switch:表示这是swi...","link":"","photos":[],"count_time":{"symbolsCount":601,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"运算符","uid":"88ea152c24a2e3533911145f0433ed7c","slug":"运算符","date":"2018-12-05T17:47:10.000Z","updated":"2019-04-05T01:47:51.000Z","comments":true,"path":"api/articles/运算符.json","cover":null,"text":"逻辑运算符 运算符 含义 用法 结合方向 &amp;&amp;、&amp; 逻辑与 op1&amp;&amp;op2 从左到右 &#124;&#124; 逻辑或 op1&#124;&#124;op2 从左到右 ! 逻辑非 !op 从右到左 位运算符 运算符 运算 举例 &lt;&...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ASCII码表","uid":"4f8fbf9c37c8afa969e05d92a1534095","slug":"ASCII码表","date":"2018-12-05T17:39:56.000Z","updated":"2021-06-28T15:28:24.188Z","comments":true,"path":"api/articles/ASCII码表.json","cover":[],"text":"ASCII码表ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO/IE...","link":"","photos":[],"count_time":{"symbolsCount":176,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"数据类型","uid":"a760ef6d11a2d6078a812f5bc31cf898","slug":"数据类型","date":"2018-12-05T16:27:24.000Z","updated":"2018-12-05T17:34:17.000Z","comments":true,"path":"api/articles/数据类型.json","cover":null,"text":"数据类型数据类型分类A : 基本数据类型B : 引用数据类型 基本数据类型(4类8种)整数类型 整数类型 占用字节数(8位等于1字节) 表述范围 byte 8位 -128 ~ 127 short 16位 -2^15 ~ 2^15 - 1 int 32位 -2^31 ~ 2^31 ...","link":"","photos":[],"count_time":{"symbolsCount":536,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"二进制、原码、反码、补码问题","uid":"a6e05bc12d9ba8fdabdade796d228b64","slug":"二进制","date":"2018-12-04T16:30:14.000Z","updated":"2018-12-05T17:36:36.000Z","comments":true,"path":"api/articles/二进制.json","cover":[],"text":"字节大小1 byte = 8 bit1 k = 1024 byte一个字节是八位eg : 00100100(这是一个字节) 进制组成与换算二进制二进制(0b开头,由0,1组成)eg : (10110110) = 2^7*1 + 2^6*0 + 2^5*1 + 2^4*1 + 2^...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":20,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":18,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}