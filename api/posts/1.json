{"total":23,"pageSize":12,"pageCount":2,"data":[{"title":"Git是什么？","uid":"079ca4b962925da31ee3129301d8960d","slug":"Git是什么","date":"2021-06-28T10:41:13.000Z","updated":"2021-06-28T10:41:51.923Z","comments":true,"path":"api/articles/Git是什么.json","cover":null,"text":"Git是什么？&emsp;&emsp;Git是目前世界上最先进的分布式版本控制系统。 什么是版本控制系统？&emsp;&emsp;能自动帮助记录每次文件的改动，还可以让他人协作编辑。 Git的诞生&emsp;&emsp;很多人都知道，Linus在1991年创建了开源的Linux，...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Git","slug":"Git","count":1,"path":"api/categories/Git.json"}],"tags":[{"name":"Git学习","slug":"Git学习","count":1,"path":"api/tags/Git学习.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2021-06-26T14:26:30.613Z","updated":"2021-06-26T14:26:30.613Z","comments":true,"path":"api/articles/hello-world.json","cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"内部类","uid":"bc67f746267711d34d7d01392a094498","slug":"内部类","date":"2019-04-05T01:50:16.000Z","updated":"2019-04-05T19:04:46.000Z","comments":true,"path":"api/articles/内部类.json","cover":null,"text":"内部类内部类概述把类定义在其他类的内部,这个类就被称为内部类.eg:在类A中定义类B,类B就是内部类 内部类的访问特点 内部类可以直接访问外部类的成员,包括私有. 外部类要访问内部类的成员,必须创建对象. 内部类位置 成员位置(成员内部类) 局部位置(局部内部类) ","link":"","photos":[],"count_time":{"symbolsCount":135,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"修饰符","uid":"7c404b581c0c2649a73faf534a78653e","slug":"修饰符","date":"2019-04-05T01:44:44.000Z","updated":"2019-04-05T01:49:34.000Z","comments":true,"path":"api/articles/修饰符.json","cover":null,"text":"修饰符权限修饰符权限修饰符:private、默认、protected、public 本类 同一包下(子类和无关类) 不同包下(子类) 不同包下(无关类) private 可以执行 不能访问 不能访问 不能访问 默认 可以执行 可以执行 不能访问 不能访问 protected 可以...","link":"","photos":[],"count_time":{"symbolsCount":756,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"导包练习题","uid":"b45a9784be195b1c2a050ed30caafc39","slug":"导包练习题","date":"2018-12-11T12:22:23.000Z","updated":"2019-04-05T01:03:37.000Z","comments":true,"path":"api/articles/导包练习题.json","cover":null,"text":"package，import，class有没有顺序关系package&gt;import&gt;classpackage:只能有一个import:可以有多个class:可以有多个，但是建议是一个 ","link":"","photos":[],"count_time":{"symbolsCount":98,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"例题","slug":"例题","count":2,"path":"api/tags/例题.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"package概述及作用","uid":"4dfc24012675b059867bcf499de79b27","slug":"package概述及作用","date":"2018-12-11T08:22:23.000Z","updated":"2019-04-05T01:47:05.000Z","comments":true,"path":"api/articles/package概述及作用.json","cover":null,"text":"包的概述 其实就是文件夹 作用:a:把相同的类名放到不同的包中b:对类进行分类管理 eg:学生:增删改查老师:增删改查 方1:按照功能分 cn.school.add AddStudent AddTeacher cn.school.delete DeleteStudent Dele...","link":"","photos":[],"count_time":{"symbolsCount":827,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"形式参数和返回值的问题","uid":"f0dff90444263315eec834dbee6f43a2","slug":"形式参数和返回值的问题","date":"2018-12-11T01:15:54.000Z","updated":"2019-04-05T01:05:03.000Z","comments":true,"path":"api/articles/形式参数和返回值的问题.json","cover":null,"text":"形式参数基本类型引用类型: 类名: (需要该类的对象) class Student&#123; public void study()&#123; System.out.println(&quot;学习&quot;); &#125; &#125; class StudentDem...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"运动员与教练练习题","uid":"6831cd9b2cda379b7d3cdbe218da0894","slug":"运动员与教练练习题","date":"2018-12-10T12:29:11.000Z","updated":"2021-06-28T15:27:50.624Z","comments":true,"path":"api/articles/运动员与教练练习题.json","cover":[],"text":"例题概况 乒乓球运动员和篮球运动员 乒乓球教练和篮球教练 为了出国交流,跟乒乓球相关的人员都需要学习英语 分析 这个案例哪些需要抽象类,哪些接口,哪些具体类 例题分析抽象类：人、运动员、教练具体类：乒乓球运动员、篮球运动员、乒乓球教练、篮球教练接口：学习英语—乒乓球运动员、乒乓球...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"例题","slug":"例题","count":2,"path":"api/tags/例题.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"接口","uid":"8aba8af17209e23865c30ccb831564d2","slug":"接口","date":"2018-12-10T02:22:34.000Z","updated":"2019-04-05T01:05:23.000Z","comments":true,"path":"api/articles/接口.json","cover":null,"text":"接口概述为了体现事物功能的扩展性，Java中就提供了接口来定义这些额外功能，并不给出具体实现。 接口特点1.接口用关键字interface表示 格式：interface 接口名{} 2.类实现接口用implements表示 格式：class 类名 implements 接口名{}...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"抽象类","uid":"166ef0124d1706b7cbddeea81ab00167","slug":"抽象类","date":"2018-12-09T01:34:55.000Z","updated":"2019-04-05T01:05:11.000Z","comments":true,"path":"api/articles/抽象类.json","cover":null,"text":"抽象类概括在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类。 抽象类的特点1.抽象类和抽象方法必须用abstract关键字修饰 格式 abstract class 类名{} public abstract void eat(); 2...","link":"","photos":[],"count_time":{"symbolsCount":630,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"继承","uid":"0528be18df5e638068d2debce4ac533e","slug":"继承","date":"2018-12-08T02:02:19.000Z","updated":"2021-06-28T13:08:29.367Z","comments":true,"path":"api/articles/继承.json","cover":[],"text":"概述多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。通过extends关键字可以实现类与类的继承 class 子类名 extends父类名&#123;&#125; 单独的这个类成为父类，基类或者超类；这多个类可以...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"代码块","uid":"efa8c010c59ff382983a4c1b80223f3a","slug":"代码块","date":"2018-12-07T02:42:11.000Z","updated":"2019-04-05T01:04:38.000Z","comments":true,"path":"api/articles/代码块.json","cover":null,"text":"代码块在Java中，使用{}括起来的代码被称为代码块，根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块。 局部代码块在方法中出现；限定变量生命周期，及早释放，提高内存利用率。 public static void main(String[] args...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Java","slug":"Java","count":19,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":17,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}