{"name":"面向对象","slug":"面向对象","count":7,"postlist":[{"title":"代码块","uid":"efa8c010c59ff382983a4c1b80223f3a","slug":"代码块","date":"2018-12-07T02:42:11.000Z","updated":"2019-04-05T01:04:38.000Z","comments":true,"path":"api/articles/代码块.json","keywords":null,"cover":null,"text":"代码块在Java中，使用{}括起来的代码被称为代码块，根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块。 局部代码块在方法中出现；限定变量生命周期，及早释放，提高内存利用率。 public static void main(String[] args...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"帮助文档的制作以及使用","uid":"028ef52bbaecf50bd1bcb213347b2846","slug":"帮助文档的制作以及使用","date":"2018-12-06T15:50:11.000Z","updated":"2019-04-05T01:04:53.000Z","comments":true,"path":"api/articles/帮助文档的制作以及使用.json","keywords":null,"cover":null,"text":"制作工具类的说明书（文档注释）文档注释格式： /** * * * * * * */ 字段 @author (作者)@version (版本)@param (参数)@return (返回值) javadoc格式： javadoc -d 目录 -author -version XXX...","link":"","photos":[],"count_time":{"symbolsCount":698,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"形式参数和返回值的问题","uid":"f0dff90444263315eec834dbee6f43a2","slug":"形式参数和返回值的问题","date":"2018-12-11T01:15:54.000Z","updated":"2019-04-05T01:05:03.000Z","comments":true,"path":"api/articles/形式参数和返回值的问题.json","keywords":null,"cover":null,"text":"形式参数基本类型引用类型: 类名: (需要该类的对象) class Student&#123; public void study()&#123; System.out.println(&quot;学习&quot;); &#125; &#125; class StudentDem...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"抽象类","uid":"166ef0124d1706b7cbddeea81ab00167","slug":"抽象类","date":"2018-12-09T01:34:55.000Z","updated":"2019-04-05T01:05:11.000Z","comments":true,"path":"api/articles/抽象类.json","keywords":null,"cover":null,"text":"抽象类概括在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类。 抽象类的特点1.抽象类和抽象方法必须用abstract关键字修饰 格式 abstract class 类名{} public abstract void eat(); 2...","link":"","photos":[],"count_time":{"symbolsCount":630,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"接口","uid":"8aba8af17209e23865c30ccb831564d2","slug":"接口","date":"2018-12-10T02:22:34.000Z","updated":"2019-04-05T01:05:23.000Z","comments":true,"path":"api/articles/接口.json","keywords":null,"cover":null,"text":"接口概述为了体现事物功能的扩展性，Java中就提供了接口来定义这些额外功能，并不给出具体实现。 接口特点1.接口用关键字interface表示 格式：interface 接口名{} 2.类实现接口用implements表示 格式：class 类名 implements 接口名{}...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"继承","uid":"0528be18df5e638068d2debce4ac533e","slug":"继承","date":"2018-12-08T02:02:19.000Z","updated":"2021-06-28T13:08:29.367Z","comments":true,"path":"api/articles/继承.json","keywords":null,"cover":[],"text":"概述多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。通过extends关键字可以实现类与类的继承 class 子类名 extends父类名&#123;&#125; 单独的这个类成为父类，基类或者超类；这多个类可以...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"面向对象","uid":"43b177c0ef2e494c11cddc986521f4d9","slug":"面向对象","date":"2018-12-06T15:03:21.000Z","updated":"2021-06-28T15:29:40.784Z","comments":true,"path":"api/articles/面向对象.json","keywords":null,"cover":[],"text":"面向对象面向对象思想面向对象是基于面向过程面向过程:强调的是每一个功能的步骤.面向对象:强调的是对象,然后由对象去调用功能(强调结果). 面向对象特点A:是一种更符合我们思想习惯的思想.B:可以将复杂的事情简单化.C:将我们以执行者变成指挥者.eg:自己去打水变成让别人去打水. ...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Java","slug":"Java","count":22,"path":"api/categories/Java.json"}],"tags":[{"name":"Java学习总结","slug":"Java学习总结","count":21,"path":"api/tags/Java学习总结.json"},{"name":"面向对象","slug":"面向对象","count":7,"path":"api/tags/面向对象.json"}],"author":{"name":"Allen Yang","slug":"blog-author","avatar":"/img/i3.jpg","link":"/","description":"记录学习中的点点滴滴","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}